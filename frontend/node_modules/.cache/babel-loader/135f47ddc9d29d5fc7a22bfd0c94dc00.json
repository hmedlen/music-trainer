{"remainingRequest":"/Users/huntermedlen/Work/WebApps/music-trainer/node_modules/babel-loader/lib/index.js!/Users/huntermedlen/Work/WebApps/music-trainer/src/webmidi.js","dependencies":[{"path":"/Users/huntermedlen/Work/WebApps/music-trainer/src/webmidi.js","mtime":1588452799777},{"path":"/Users/huntermedlen/Work/WebApps/music-trainer/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huntermedlen/Work/WebApps/music-trainer/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/huntermedlen/Work/WebApps/music-trainer/src/webmidi.js"],"names":["scope","WebMidi","prototype","_singleton","Error","_inputs","_outputs","_userHandlers","_stateChangeQueue","_processingStateChange","_midiInterfaceEvents","_nrpnBuffer","_nrpnEventsEnabled","_nrpnTypes","_notes","_semitones","C","D","E","F","G","A","B","Object","defineProperties","MIDI_SYSTEM_MESSAGES","value","sysex","timecode","songposition","songselect","tuningrequest","sysexend","clock","start","stop","activesensing","reset","midimessage","unknownsystemmessage","writable","enumerable","configurable","MIDI_CHANNEL_MESSAGES","noteoff","noteon","keyaftertouch","controlchange","channelmode","nrpn","programchange","channelaftertouch","pitchbend","MIDI_REGISTERED_PARAMETER","pitchbendrange","channelfinetuning","channelcoarsetuning","tuningprogram","tuningbank","modulationrange","azimuthangle","elevationangle","gain","distanceratio","maximumdistance","maximumdistancegain","referencedistanceratio","panspreadangle","rollangle","MIDI_CONTROL_CHANGE_MESSAGES","bankselectcoarse","modulationwheelcoarse","breathcontrollercoarse","footcontrollercoarse","portamentotimecoarse","dataentrycoarse","volumecoarse","balancecoarse","pancoarse","expressioncoarse","effectcontrol1coarse","effectcontrol2coarse","generalpurposeslider1","generalpurposeslider2","generalpurposeslider3","generalpurposeslider4","bankselectfine","modulationwheelfine","breathcontrollerfine","footcontrollerfine","portamentotimefine","dataentryfine","volumefine","balancefine","panfine","expressionfine","effectcontrol1fine","effectcontrol2fine","holdpedal","portamento","sustenutopedal","softpedal","legatopedal","hold2pedal","soundvariation","resonance","soundreleasetime","soundattacktime","brightness","soundcontrol6","soundcontrol7","soundcontrol8","soundcontrol9","soundcontrol10","generalpurposebutton1","generalpurposebutton2","generalpurposebutton3","generalpurposebutton4","reverblevel","tremololevel","choruslevel","celestelevel","phaserlevel","databuttonincrement","databuttondecrement","nonregisteredparametercoarse","nonregisteredparameterfine","registeredparametercoarse","registeredparameterfine","MIDI_NRPN_MESSAGES","entrymsb","entrylsb","increment","decrement","paramlsb","parammsb","nullactiveparameter","MIDI_CHANNEL_MODE_MESSAGES","allsoundoff","resetallcontrollers","localcontrol","allnotesoff","omnimodeoff","omnimodeon","monomodeon","polymodeon","octaveOffset","supported","get","navigator","enabled","undefined","bind","inputs","outputs","sysexEnabled","nrpnEventsEnabled","set","nrpnTypes","time","performance","now","wm","enable","callback","requestMIDIAccess","then","midiAccess","events","promises","promiseTimeout","_resetInterfaceUserHandlers","onstatechange","e","push","values","input","next","done","open","output","onPortsOpen","clearTimeout","_updateInputsAndOutputs","_onInterfaceStateChange","call","forEach","event","setTimeout","Promise","all","err","console","warn","disable","addListener","type","listener","TypeError","indexOf","hasListener","o","length","removeListener","splice","toMIDIChannels","channel","channels","Array","isArray","map","ch","parseInt","filter","getInputById","id","String","i","getOutputById","getInputByName","name","getOctave","number","Math","floor","getOutputByName","guessNoteNumber","toFixed","round","noteNameToNumber","matches","match","RangeError","semitones","toUpperCase","octave","result","toLowerCase","_updateInputs","_updateOutputs","remove","updated","_midiInput","nInput","add","j","Input","_midiOutput","nOutput","Output","timestamp","timeStamp","port","state","connection","manufacturer","handler","midiInput","that","system","_initializeUserHandlers","onmidimessage","_onMidiMessage","item","on","constructor","every","chNum","listeners","l","prop1","hasOwnProperty","prop2","target","data","_parseChannelEvent","_parseNrpnEvent","_parseSystemEvent","command","channelBufferIndex","data1","data2","ccEvent","controller","getCcNameByNumber","rawData","ev","nrpnNumber","nrpnValue","nrpnControllerType","nrpnEvent","note","velocity","rawVelocity","getChannelModeByNumber","cc","status","cm","song","midiOutput","send","message","parsed","concat","parseFloat","sendSysex","options","_parseTimeParameter","sendTimecodeQuarterFrame","sendSongPosition","msb","lsb","sendSongSelect","sendTuningRequest","sendClock","sendStart","sendContinue","sendStop","sendActiveSensing","sendReset","stopNote","sendChannelMode","nVelocity","isNaN","_convertNoteToArray","playNote","duration","nRelease","release","sendKeyAftertouch","pressure","nPressure","sendControlChange","_selectRegisteredParameter","parameter","_selectNonRegisteredParameter","_setCurrentRegisteredParameter","_deselectRegisteredParameter","setRegisteredParameter","setNonRegisteredParameter","incrementRegisteredParameter","decrementRegisteredParameter","setPitchBendRange","cents","setModulationRange","setMasterTuning","coarse","fine","setTuningProgram","setTuningBank","sendProgramChange","program","sendChannelAftertouch","sendPitchBend","bend","nLevel","substring","notes","define","amd","module","exports"],"mappings":"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","sourcesContent":["(function(scope) {\n\n  \"use strict\";\n\n  /**\n   * The `WebMidi` object makes it easier to work with the Web MIDI API. Basically, it simplifies\n   * two things: sending outgoing MIDI messages and reacting to incoming MIDI messages.\n   *\n   * Sending MIDI messages is done via an `Output` object. All available outputs can be accessed in\n   * the `WebMidi.outputs` array. There is one `Output` object for each output port available on\n   * your system. Similarly, reacting to MIDI messages as they are coming in is simply a matter of\n   * adding a listener to an `Input` object. Similarly, all inputs can be found in the\n   * `WebMidi.inputs` array.\n   *\n   * Please note that a single hardware device might create more than one input and/or output ports.\n   *\n   * #### Sending messages\n   *\n   * To send MIDI messages, you simply need to call the desired method (`playNote()`,\n   * `sendPitchBend()`, `stopNote()`, etc.) from an `Output` object and pass in the appropriate\n   * parameters. All the native MIDI communication will be handled for you. The only additional\n   * thing that needs to be done is to first enable `WebMidi`. Here is an example:\n   *\n   *      WebMidi.enable(function(err) {\n   *        if (err) console.log(\"An error occurred\", err);\n   *        WebMidi.outputs[0].playNote(\"C3\");\n   *      });\n   *\n   * The code above, calls the `WebMidi.enable()` method. Upon success, this method executes the\n   * callback function specified as a parameter. In this case, the callback calls the `playnote()`\n   * function to play a 3rd octave C on the first available output port.\n   *\n   * #### Receiving messages\n   *\n   * Receiving messages is just as easy. You simply have to set a callback function to be triggered\n   * when a specific MIDI message is received. For example, here\"s how to listen for pitch bend\n   * events on the first input port:\n   *\n   *      WebMidi.enable(function(err) {\n   *        if (err) console.log(\"An error occurred\", err);\n   *\n   *        WebMidi.inputs[0].addListener(\"pitchbend\", \"all\", function(e) {\n   *          console.log(\"Pitch value: \" + e.value);\n   *        });\n   *\n   *      });\n   *\n   * As you can see, this library is much easier to use than the native Web MIDI API. No need to\n   * manually craft or decode binary MIDI messages anymore!\n   *\n   * @class WebMidi\n   * @static\n   *\n   * @throws Error WebMidi is a singleton, it cannot be instantiated directly.\n   *\n   * @todo  Switch away from yuidoc (deprecated) to be able to serve doc over https\n   * @todo  Yuidoc does not allow multiple exceptions (@throws) for a single method ?!\n   *\n   */\n  function WebMidi() {\n\n    // Singleton. Prevent instantiation through WebMidi.__proto__.constructor()\n    if (WebMidi.prototype._singleton) {\n      throw new Error(\"WebMidi is a singleton, it cannot be instantiated directly.\");\n    }\n    WebMidi.prototype._singleton = this;\n\n    // MIDI inputs and outputs\n    this._inputs = [];\n    this._outputs = [];\n\n    // Object to hold all user-defined handlers for interface-wide events (connected, disconnected,\n    // etc.)\n    this._userHandlers = {};\n\n    // Array of statechange events to process. These events must be parsed synchronously so they do\n    // not override each other.\n    this._stateChangeQueue = [];\n\n    // Indicates whether we are currently processing a statechange event (in which case new events\n    // are to be queued).\n    this._processingStateChange = false;\n\n    // Events triggered at the interface level (WebMidi)\n    this._midiInterfaceEvents = [\"connected\", \"disconnected\"];\n\n    // the current nrpns being constructed, by channel\n    this._nrpnBuffer = [[],[],[],[], [],[],[],[], [],[],[],[], [],[],[],[]];\n\n    // Enable/Disable NRPN event dispatch\n    this._nrpnEventsEnabled = true;\n\n    // NRPN message types\n    this._nrpnTypes = [\"entry\", \"increment\", \"decrement\"];\n\n    // Notes and semitones for note guessing\n    this._notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n    this._semitones = {C: 0, D: 2, E: 4, F: 5, G: 7, A: 9, B: 11 };\n\n    // Define some \"static\" properties\n    Object.defineProperties(this, {\n\n      /**\n       * [read-only] List of valid MIDI system messages and matching hexadecimal values.\n       *\n       * Note: values 249 and 253 are actually dispatched by the Web MIDI API but I do not know what\n       * they are used for. They are not part of the online\n       * [MIDI 1.0 spec](http://www.midi.org/techspecs/midimessages.php).\n       *\n       * @property MIDI_SYSTEM_MESSAGES\n       * @type Object\n       * @static\n       *\n       * @since 2.0.0\n       */\n      MIDI_SYSTEM_MESSAGES: {\n        value: {\n\n          // System common messages\n          sysex: 0xF0,            // 240\n          timecode: 0xF1,         // 241\n          songposition: 0xF2,     // 242\n          songselect: 0xF3,       // 243\n          tuningrequest: 0xF6,    // 246\n          sysexend: 0xF7,         // 247 (never actually received - simply ends a sysex)\n\n          // System real-time messages\n          clock: 0xF8,            // 248\n          start: 0xFA,            // 250\n          continue: 0xFB,         // 251\n          stop: 0xFC,             // 252\n          activesensing: 0xFE,    // 254\n          reset: 0xFF,            // 255\n\n          // Custom WebMidi.js messages\n          midimessage: 0,\n          unknownsystemmessage: -1\n        },\n        writable: false,\n        enumerable: true,\n        configurable: false\n      },\n\n      /**\n       * [read-only] An object containing properties for each MIDI channel messages and their\n       * associated hexadecimal value.\n       *\n       * @property MIDI_CHANNEL_MESSAGES\n       * @type Object\n       * @static\n       *\n       * @since 2.0.0\n       */\n      MIDI_CHANNEL_MESSAGES: {\n        value: {\n          noteoff: 0x8,           // 8\n          noteon: 0x9,            // 9\n          keyaftertouch: 0xA,     // 10\n          controlchange: 0xB,     // 11\n          channelmode: 0xB,       // 11\n          nrpn: 0xB,              // 11\n          programchange: 0xC,     // 12\n          channelaftertouch: 0xD, // 13\n          pitchbend: 0xE          // 14\n        },\n        writable: false,\n        enumerable: true,\n        configurable: false\n      },\n\n      /**\n       * [read-only] An object containing properties for each registered parameters and their\n       * associated pair of hexadecimal values. MIDI registered parameters extend the original list\n       * of control change messages (a.k.a. CC messages). Currently, there are only a limited number\n       * of them.\n       *\n       * @property MIDI_REGISTERED_PARAMETER\n       * @type Object\n       * @static\n       *\n       * @since 2.0.0\n       */\n      MIDI_REGISTERED_PARAMETER: {\n        value: {\n          pitchbendrange: [0x00, 0x00],\n          channelfinetuning: [0x00, 0x01],\n          channelcoarsetuning: [0x00, 0x02],\n          tuningprogram: [0x00, 0x03],\n          tuningbank: [0x00, 0x04],\n          modulationrange: [0x00, 0x05],\n\n          azimuthangle: [0x3D, 0x00],\n          elevationangle: [0x3D, 0x01],\n          gain: [0x3D, 0x02],\n          distanceratio: [0x3D, 0x03],\n          maximumdistance: [0x3D, 0x04],\n          maximumdistancegain: [0x3D, 0x05],\n          referencedistanceratio: [0x3D, 0x06],\n          panspreadangle: [0x3D, 0x07],\n          rollangle: [0x3D, 0x08]\n        },\n        writable: false,\n        enumerable: true,\n        configurable: false\n      },\n\n      /**\n       * [read-only] An object containing properties for each MIDI control change messages (a.k.a.\n       * CC messages) and their associated hexadecimal value.\n       *\n       * @property MIDI_CONTROL_CHANGE_MESSAGES\n       * @type Object\n       * @static\n       *\n       * @since 2.0.0\n       */\n      MIDI_CONTROL_CHANGE_MESSAGES: {\n        value: {\n          bankselectcoarse: 0,\n          modulationwheelcoarse: 1,\n          breathcontrollercoarse: 2,\n          footcontrollercoarse: 4,\n          portamentotimecoarse: 5,\n          dataentrycoarse: 6,\n          volumecoarse: 7,\n          balancecoarse: 8,\n          pancoarse: 10,\n          expressioncoarse: 11,\n          effectcontrol1coarse: 12,\n          effectcontrol2coarse: 13,\n          generalpurposeslider1: 16,\n          generalpurposeslider2: 17,\n          generalpurposeslider3: 18,\n          generalpurposeslider4: 19,\n          bankselectfine: 32,\n          modulationwheelfine: 33,\n          breathcontrollerfine: 34,\n          footcontrollerfine: 36,\n          portamentotimefine: 37,\n          dataentryfine: 38,\n          volumefine: 39,\n          balancefine: 40,\n          panfine: 42,\n          expressionfine: 43,\n          effectcontrol1fine: 44,\n          effectcontrol2fine: 45,\n          holdpedal: 64,\n          portamento: 65,\n          sustenutopedal: 66,\n          softpedal: 67,\n          legatopedal: 68,\n          hold2pedal: 69,\n          soundvariation: 70,\n          resonance: 71,\n          soundreleasetime: 72,\n          soundattacktime: 73,\n          brightness: 74,\n          soundcontrol6: 75,\n          soundcontrol7: 76,\n          soundcontrol8: 77,\n          soundcontrol9: 78,\n          soundcontrol10: 79,\n          generalpurposebutton1: 80,\n          generalpurposebutton2: 81,\n          generalpurposebutton3: 82,\n          generalpurposebutton4: 83,\n          reverblevel: 91,\n          tremololevel: 92,\n          choruslevel: 93,\n          celestelevel: 94,\n          phaserlevel: 95,\n          databuttonincrement: 96,\n          databuttondecrement: 97,\n          nonregisteredparametercoarse: 98,\n          nonregisteredparameterfine: 99,\n          registeredparametercoarse: 100,\n          registeredparameterfine: 101\n        },\n        writable: false,\n        enumerable: true,\n        configurable: false\n      },\n\n      /**\n       * [read-only] An object containing properties for MIDI control change messages\n       * that make up NRPN messages\n       *\n       * @property MIDI_NRPN_MESSAGES\n       * @type Object\n       * @static\n       *\n       * @since 2.0.0\n       */\n      MIDI_NRPN_MESSAGES: {\n        value: {\n          entrymsb: 6,\n          entrylsb: 38,\n          increment: 96,\n          decrement: 97,\n          paramlsb: 98,\n          parammsb: 99,\n          nullactiveparameter: 127\n        },\n        writable: false,\n        enumerable: true,\n        configurable: false\n      },\n\n      /**\n       * [read-only] List of MIDI channel mode messages as defined in the official MIDI\n       * specification.\n       *\n       * @property MIDI_CHANNEL_MODE_MESSAGES\n       * @type Object\n       * @static\n       *\n       * @since 2.0.0\n       */\n      MIDI_CHANNEL_MODE_MESSAGES: {\n        value: {\n          allsoundoff: 120,\n          resetallcontrollers: 121,\n          localcontrol: 122,\n          allnotesoff: 123,\n          omnimodeoff: 124,\n          omnimodeon: 125,\n          monomodeon: 126,\n          polymodeon: 127\n        },\n        writable: false,\n        enumerable: true,\n        configurable: false\n      },\n\n      /**\n       * An integer to offset the octave both in inbound and outbound messages. By default, middle C\n       * (MIDI note number 60) is placed on the 4th octave (C4).\n       *\n       * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n       * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n       *\n       * @property octaveOffset\n       * @type Number\n       * @static\n       *\n       * @since 2.1\n       */\n      octaveOffset: {\n        value: 0,\n        writable: true,\n        enumerable: true,\n        configurable: false\n      }\n\n    });\n\n    // Define getters/setters\n    Object.defineProperties(this, {\n\n      /**\n       * [read-only] Indicates whether the environment supports the Web MIDI API or not.\n       *\n       * Note: in environments that do not offer built-in MIDI support, this will report true if the\n       * `navigator.requestMIDIAccess` function is available. For example, if you have installed\n       * WebMIDIAPIShim but no plugin, this property will be true even though actual support might\n       * not be there.\n       *\n       * @property supported\n       * @type Boolean\n       * @static\n       */\n      supported: {\n        enumerable: true,\n        get: function() {\n          return \"requestMIDIAccess\" in navigator;\n        }\n      },\n\n      /**\n       * [read-only] Indicates whether the interface to the host\"s MIDI subsystem is currently\n       * enabled.\n       *\n       * @property enabled\n       * @type Boolean\n       * @static\n       */\n      enabled: {\n        enumerable: true,\n        get: function() {\n          return this.interface !== undefined;\n        }.bind(this)\n      },\n\n      /**\n       * [read-only] An array of all currently available MIDI input ports.\n       *\n       * @property inputs\n       * @type {Array}\n       * @static\n       */\n      inputs: {\n        enumerable: true,\n        get: function() {\n          return this._inputs;\n        }.bind(this)\n      },\n\n      /**\n       * [read-only] An array of all currently available MIDI output ports.\n       *\n       * @property outputs\n       * @type {Array}\n       * @static\n       */\n      outputs: {\n        enumerable: true,\n        get: function() {\n          return this._outputs;\n        }.bind(this)\n      },\n\n      /**\n       * [read-only] Indicates whether the interface to the host\"s MIDI subsystem is currently\n       * active.\n       *\n       * @property sysexEnabled\n       * @type Boolean\n       * @static\n       */\n      sysexEnabled: {\n        enumerable: true,\n        get: function() {\n          return !!(this.interface && this.interface.sysexEnabled);\n        }.bind(this)\n      },\n\n      /**\n       * [read-only] Indicates whether WebMidi should dispatch Non-Registered\n       * Parameter Number events (which are generally groups of CC messages)\n       * If correct sequences of CC messages are received, NRPN events will\n       * fire. The first out of order NRPN CC will fall through the collector\n       * logic and all CC messages buffered will be discarded as incomplete.\n       *\n       * @property nrpnEventsEnabled\n       * @type Boolean\n       * @static\n       */\n      nrpnEventsEnabled: {\n        enumerable: true,\n        get: function() {\n          return !!(this._nrpnEventsEnabled);\n        }.bind(this),\n        set: function(enabled) {\n          this._nrpnEventsEnabled = enabled;\n          return this._nrpnEventsEnabled;\n        }\n      },\n\n      /**\n       * [read-only] NRPN message types\n       *\n       * @property nrpnTypes\n       * @type Array\n       * @static\n       */\n      nrpnTypes: {\n        enumerable: true,\n        get: function() {\n          return this._nrpnTypes;\n        }.bind(this)\n      },\n\n      /**\n       * [read-only] Current MIDI performance time in milliseconds. This can be used to queue events\n       * in the future.\n       *\n       * @property time\n       * @type DOMHighResTimeStamp\n       * @static\n       */\n      time: {\n        enumerable: true,\n        get: function() {\n          return performance.now();\n        }\n      }\n\n    });\n\n  }\n\n  // WebMidi is a singleton so we instantiate it ourselves and keep it in a var for internal\n  // reference.\n  var wm = new WebMidi();\n\n  /**\n   * Checks if the Web MIDI API is available and then tries to connect to the host's MIDI subsystem.\n   * This is an asynchronous operation. When it's done, the specified handler callback will be\n   * executed. If an error occurred, the callback function will receive an `Error` object as its\n   * sole parameter.\n   *\n   * To enable the use of system exclusive messages, the `sysex` parameter should be set to true.\n   * However, under some environments (e.g. Jazz-Plugin), the sysex parameter is ignored and sysex\n   * is always enabled.\n   *\n   * Warning: starting with Chrome v77, the Web MIDI API must be hosted on a secure origin\n   * (`https://`, `localhost` or `file:///`) and the user will always be prompted to authorize the\n   * operation (no matter if `sysex` is requested or not).\n   *\n   * @method enable\n   * @static\n   *\n   * @param [callback] {Function} A function to execute upon success. This function will receive an\n   * `Error` object upon failure to enable the Web MIDI API.\n   * @param [sysex=false] {Boolean} Whether to enable MIDI system exclusive messages or not.\n   *\n   * @throws Error The Web MIDI API is not supported by your browser.\n   * @throws Error Jazz-Plugin must be installed to use WebMIDIAPIShim.\n   */\n  WebMidi.prototype.enable = function(callback, sysex) {\n\n    // Why are you not using a Promise-based API for the enable() method?\n    //\n    // Short answer: because of IE.\n    //\n    // Long answer:\n    //\n    // IE 11 and below still do not support promises. Therefore, WebMIDIAPIShim has to implement a\n    // simple Promise look-alike object to handle the call to requestMIDIAccess(). This look-alike\n    // is not a fully-fledged Promise object. It does not support using catch() for example. This\n    // means that, to provide a real Promise-based interface for the enable() method, we would need\n    // to add a dependency in the form of a Promise polyfill. So, to keep things simpler, we will\n    // stick to the good old callback based enable() function.\n\n    if (this.enabled) return;\n\n    if ( !this.supported) {\n\n      if (typeof callback === \"function\") {\n        callback( new Error(\"The Web MIDI API is not supported by your browser.\") );\n      }\n\n      return;\n\n    }\n\n    navigator.requestMIDIAccess({sysex: sysex}).then(\n\n      function(midiAccess) {\n\n        var events = [],\n          promises = [],\n          promiseTimeout;\n\n        this.interface = midiAccess;\n        this._resetInterfaceUserHandlers();\n\n        // We setup a temporary `statechange` handler that will catch all events triggered while we\n        // setup. Those events will be re-triggered after calling the user\"s callback. This will\n        // allow the user to listen to \"connected\" events which can be very convenient.\n        this.interface.onstatechange = function (e) {\n          events.push(e);\n        };\n\n        // Here we manually open the inputs and outputs. Usually, this is optional. When the ports\n        // are not explicitely opened, they will be opened automatically (and asynchonously) by\n        // setting a listener on `midimessage` (MIDIInput) or calling `send()` (MIDIOutput).\n        // However, we do not want that here. We want to be sure that \"connected\" events will be\n        // available in the user\"s callback. So, what we do is open all input and output ports and\n        // wait until all promises are resolved. Then, we re-trigger the events after the user\"s\n        // callback has been executed. This seems like the most sensible and practical way.\n        var inputs = midiAccess.inputs.values();\n        for (var input = inputs.next(); input && !input.done; input = inputs.next()) {\n          promises.push(input.value.open());\n        }\n\n        var outputs = midiAccess.outputs.values();\n        for (var output = outputs.next(); output && !output.done; output = outputs.next()) {\n          promises.push(output.value.open());\n        }\n\n        // Since this library might be used in environments without support for promises (such as\n        // Jazz-Midi) or in environments that are not properly opening the ports (such as Web MIDI\n        // Browser), we fall back to a timer-based approach if the promise-based approach fails.\n        function onPortsOpen() {\n\n          clearTimeout(promiseTimeout);\n\n          this._updateInputsAndOutputs();\n          this.interface.onstatechange = this._onInterfaceStateChange.bind(this);\n\n          // We execute the callback and then re-trigger the statechange events.\n          if (typeof callback === \"function\") { callback.call(this); }\n\n          events.forEach(function (event) {\n            this._onInterfaceStateChange(event);\n          }.bind(this));\n\n        }\n\n        promiseTimeout = setTimeout(onPortsOpen.bind(this), 200);\n\n        if (Promise) {\n          Promise\n            .all(promises)\n            .catch(function(err) { console.warn(err); })\n            .then(onPortsOpen.bind(this));\n        }\n\n        // When MIDI access is requested, all input and output ports have their \"state\" set to\n        // \"connected\". However, the value of their \"connection\" property is \"closed\".\n        //\n        // A `MIDIInput` becomes `open` when you explicitely call its `open()` method or when you\n        // assign a listener to its `onmidimessage` property. A `MIDIOutput` becomes `open` when you\n        // use the `send()` method or when you can explicitely call its `open()` method.\n        //\n        // Calling `_updateInputsAndOutputs()` attaches listeners to all inputs. As per the spec,\n        // this triggers a `statechange` event on MIDIAccess.\n\n      }.bind(this),\n\n      function (err) {\n        if (typeof callback === \"function\") { callback.call(this, err); }\n      }.bind(this)\n\n    );\n\n  };\n\n  /**\n   * Completely disables `WebMidi` by unlinking the MIDI subsystem\"s interface and destroying all\n   * `Input` and `Output` objects that may be available. This also means that any listener that may\n   * have been defined on `Input` or `Output` objects will be destroyed.\n   *\n   * @method disable\n   * @static\n   *\n   * @since 2.0.0\n   */\n  WebMidi.prototype.disable = function() {\n\n    if ( !this.supported ) {\n      throw new Error(\"The Web MIDI API is not supported by your browser.\");\n    }\n\n    if (this.interface) this.interface.onstatechange = undefined;\n    this.interface = undefined; // also resets enabled, sysexEnabled, nrpnEventsEnabled\n    this._inputs = [];\n    this._outputs = [];\n    this._nrpnEventsEnabled = true;\n    this._resetInterfaceUserHandlers();\n\n  };\n\n  /**\n   * Adds an event listener on the `WebMidi` object that will trigger a function callback when the\n   * specified event happens.\n   *\n   * WebMidi must be enabled before adding event listeners.\n   *\n   * Currently, only one event is being dispatched by the `WebMidi` object:\n   *\n   *    * {{#crossLink \"WebMidi/statechange:event\"}}statechange{{/crossLink}}\n   *\n   * @method addListener\n   * @static\n   * @chainable\n   *\n   * @param type {String} The type of the event.\n   *\n   * @param listener {Function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object\"s properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @throws {Error} WebMidi must be enabled before adding event listeners.\n   * @throws {TypeError} The specified event type is not supported.\n   * @throws {TypeError} The \"listener\" parameter must be a function.\n   *\n   * @return {WebMidi} Returns the `WebMidi` object so methods can be chained.\n   */\n  WebMidi.prototype.addListener = function(type, listener) {\n\n    if (!this.enabled) {\n      throw new Error(\"WebMidi must be enabled before adding event listeners.\");\n    }\n\n    if (typeof listener !== \"function\") {\n      throw new TypeError(\"The 'listener' parameter must be a function.\");\n    }\n\n    if (this._midiInterfaceEvents.indexOf(type) >= 0) {\n      this._userHandlers[type].push(listener);\n    } else {\n      throw new TypeError(\"The specified event type is not supported.\");\n    }\n\n    return this;\n\n  };\n\n  /**\n   * Checks if the specified event type is already defined to trigger the specified listener\n   * function.\n   *\n   * @method hasListener\n   * @static\n   *\n   * @param {String} type The type of the event.\n   * @param {Function} listener The callback function to check for.\n   *\n   * @throws {Error} WebMidi must be enabled before checking event listeners.\n   * @throws {TypeError} The \"listener\" parameter must be a function.\n   * @throws {TypeError} The specified event type is not supported.\n   *\n   * @return {Boolean} Boolean value indicating whether or not a callback is already defined for\n   * this event type.\n   */\n  WebMidi.prototype.hasListener = function(type, listener) {\n\n    if (!this.enabled) {\n      throw new Error(\"WebMidi must be enabled before checking event listeners.\");\n    }\n\n    if (typeof listener !== \"function\") {\n      throw new TypeError(\"The 'listener' parameter must be a function.\");\n    }\n\n    if (this._midiInterfaceEvents.indexOf(type) >= 0) {\n\n      for (var o = 0; o < this._userHandlers[type].length; o++) {\n        if (this._userHandlers[type][o] === listener) {\n          return true;\n        }\n      }\n\n    } else {\n      throw new TypeError(\"The specified event type is not supported.\");\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Removes the specified listener(s). If the `listener` parameter is left undefined, all listeners\n   * for the specified `type` will be removed. If both the `listener` and the `type` parameters are\n   * omitted, all listeners attached to the `WebMidi` object will be removed.\n   *\n   * @method removeListener\n   * @static\n   * @chainable\n   *\n   * @param {String} [type] The type of the event.\n   * @param {Function} [listener] The callback function to check for.\n   *\n   * @throws {Error} WebMidi must be enabled before removing event listeners.\n   * @throws {TypeError} The \"listener\" parameter must be a function.\n   * @throws {TypeError} The specified event type is not supported.\n   *\n   * @return {WebMidi} The `WebMidi` object for easy method chaining.\n   */\n  WebMidi.prototype.removeListener = function(type, listener) {\n\n    if (!this.enabled) {\n      throw new Error(\"WebMidi must be enabled before removing event listeners.\");\n    }\n\n    if (listener !== undefined && typeof listener !== \"function\") {\n      throw new TypeError(\"The 'listener' parameter must be a function.\");\n    }\n\n    if (this._midiInterfaceEvents.indexOf(type) >= 0) {\n\n      if (listener) {\n\n        for (var o = 0; o < this._userHandlers[type].length; o++) {\n          if (this._userHandlers[type][o] === listener) {\n            this._userHandlers[type].splice(o, 1);\n          }\n        }\n\n      } else {\n        this._userHandlers[type] = [];\n      }\n\n    } else if (type === undefined) {\n\n      this._resetInterfaceUserHandlers();\n\n    } else {\n      throw new TypeError(\"The specified event type is not supported.\");\n    }\n\n    return this;\n\n  };\n\n  /**\n   * Returns a sanitized array of valid MIDI channel numbers (1-16). The parameter should be one of\n   * the following:\n   *\n   * * a single integer\n   * * an array of integers\n   * * the special value `\"all\"`\n   * * the special value `\"none\"`\n   *\n   * Passing `\"all\"` or `undefined` as a parameter to this function results in all channels being\n   * returned (1-16). Passing `\"none\"` results in no channel being returned (as an empty array).\n   *\n   * Note: parameters that cannot successfully be parsed to integers between 1 and 16 are silently\n   * ignored.\n   *\n   * @method toMIDIChannels\n   * @static\n   *\n   * @param [channel=\"all\"] {Number|Array|\"all\"|\"none\"}\n   * @returns {Array} An array of 0 or more valid MIDI channel numbers\n   */\n  WebMidi.prototype.toMIDIChannels = function(channel) {\n\n    var channels;\n\n    if (channel === \"all\" || channel === undefined) {\n      channels = [\"all\"];\n    } else if (channel === \"none\") {\n      channels = [];\n      return channels;\n    } else if (!Array.isArray(channel)) {\n      channels = [channel];\n    } else {\n      channels = channel;\n    }\n\n    // In order to preserve backwards-compatibility, we let this assignment as it is.\n    if (channels.indexOf(\"all\") > -1) {\n      channels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    }\n\n    return channels\n      .map(function(ch) {\n        return parseInt(ch);\n      })\n      .filter(function(ch) {\n        return (ch >= 1 && ch <= 16);\n      });\n\n  };\n\n  /**\n   *\n   * Returns the `Input` object that matches the specified ID string or `false` if no matching input\n   * is found. As per the Web MIDI API specification, IDs are strings (not integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @method getInputById\n   * @static\n   *\n   * @param id {String} The ID string of the port. IDs can be viewed by looking at the\n   * `WebMidi.inputs` array.\n   *\n   * @returns {Input|false} A MIDIInput port matching the specified ID string. If no matching port\n   * can be found, the method returns `false`.\n   *\n   * @throws Error WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  WebMidi.prototype.getInputById = function(id) {\n\n    if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n\n    id = String(id);\n\n    for (var i = 0; i < this.inputs.length; i++) {\n      if (this.inputs[i].id === id) return this.inputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the `Output` object that matches the specified ID string or `false` if no matching\n   * output is found. As per the Web MIDI API specification, IDs are strings (not integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @method getOutputById\n   * @static\n   *\n   * @param id {String} The ID string of the port. IDs can be viewed by looking at the\n   * `WebMidi.outputs` array.\n   *\n   * @returns {Output|false} A MIDIOutput port matching the specified ID string. If no matching port\n   * can be found, the method returns `false`.\n   *\n   * @throws Error WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  WebMidi.prototype.getOutputById = function(id) {\n\n    if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n\n    id = String(id);\n\n    for (var i = 0; i < this.outputs.length; i++) {\n      if (this.outputs[i].id === id) return this.outputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the first MIDI `Input` whose name *contains* the specified string.\n   *\n   * Please note that the port names change from one host to another. For example, Chrome does\n   * not report port names in the same way as the Jazz-Plugin does.\n   *\n   * @method getInputByName\n   * @static\n   *\n   * @param name {String} The name of a MIDI input port such as those visible in the\n   * `WebMidi.inputs` array.\n   *\n   * @returns {Input|False} The `Input` that was found or `false` if no input matched the specified\n   * name.\n   *\n   * @throws Error WebMidi is not enabled.\n   * @throws TypeError The name must be a string.\n   *\n   * @since 2.0.0\n   */\n  WebMidi.prototype.getInputByName = function(name) {\n\n    if (!this.enabled) {\n      throw new Error(\"WebMidi is not enabled.\");\n    }\n\n    for (var i = 0; i < this.inputs.length; i++) {\n      if (~this.inputs[i].name.indexOf(name)) { return this.inputs[i]; }\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the octave number for the specified MIDI note number (0-127). By default, the value is\n   * based on middle C (note number 60) being placed on the 4th octave (C4). However, by using the\n   * <a href=\"#property_octaveOffset\">octaveOffset</a> property, you can offset the result as much\n   * as you want.\n   *\n   * @method getOctave\n   * @static\n   *\n   * @param number {Number} An integer representing a valid MIDI note number (between 0 and 127).\n   *\n   * @returns {Number} The octave (as a signed integer) or `undefined`.\n   *\n   * @since 2.0.0-rc.6\n   */\n  WebMidi.prototype.getOctave = function(number) {\n\n    if (number != null && number >= 0 && number <= 127) {\n      return Math.floor(Math.floor(number) / 12 - 1) + Math.floor(wm.octaveOffset);\n    }\n\n  };\n\n  /**\n   * Returns the first MIDI `Output` that matches the specified name.\n   *\n   * Please note that the port names change from one host to another. For example, Chrome does\n   * not report port names in the same way as the Jazz-Plugin does.\n   *\n   * @method getOutputByName\n   * @static\n   *\n   * @param name {String} The name of a MIDI output port such as those visible in the\n   * `WebMidi.outputs` array.\n   *\n   * @returns {Output|False} The `Output` that was found or `false` if no output matched the\n   * specified name.\n   *\n   * @throws Error WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  WebMidi.prototype.getOutputByName = function(name) {\n\n    if (!this.enabled) {\n      throw new Error(\"WebMidi is not enabled.\");\n    }\n\n    for (var i = 0; i < this.outputs.length; i++) {\n      if (~this.outputs[i].name.indexOf(name)) { return this.outputs[i]; }\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns a valid MIDI note number (0-127) given the specified input. The input usually is a note\n   * name (C3, F#4, D-2, G8, etc.). If an integer between 0 and 127, it will simply be returned as\n   * is.\n   *\n   * @method guessNoteNumber\n   * @static\n   *\n   * @param input {Number|String} A string to extract the note number from. An integer can also be\n   * used, in which case it will simply be returned (if between 0 and 127).\n   * @throws {Error} Invalid input value\n   * @returns {Number} A valid MIDI note number (0-127).\n   */\n  WebMidi.prototype.guessNoteNumber = function(input) {\n\n    var output = false;\n\n    if (input && input.toFixed && input >= 0 && input <= 127) {         // uint\n      output = Math.round(input);\n    } else if (parseInt(input) >= 0 && parseInt(input) <= 127) {        // uint as string\n      output = parseInt(input);\n    } else if (typeof input === \"string\" || input instanceof String) {  // string\n      output = this.noteNameToNumber(input);\n    }\n\n    if (output === false) throw new Error(\"Invalid input value (\" + input + \").\");\n    return output;\n\n  };\n\n  /**\n   * Returns a MIDI note number matching the note name passed in the form of a string parameter. The\n   * note name must include the octave number. The name can also optionally include a sharp (#),\n   * a double sharp (##), a flat (b) or a double flat (bb) symbol: C5, G4, D#-1, F0, Gb7, Eb-1,\n   * Abb4, B##6, etc.\n   *\n   * Note that, in converting note names to numbers, C4 is considered to be middle C (MIDI note\n   * number 60) as per the scientific pitch notation standard.\n   *\n   * Also note that the resulting note number is offset by the `octaveOffset` value (if not zero).\n   * For example, if you pass in \"C4\" and the `octaveOffset` value is 2 the resulting MIDI note\n   * number will be 36.\n   *\n   * @method noteNameToNumber\n   * @static\n   *\n   * @param name {String} The name of the note in the form of a letter, followed by an optional \"#\",\n   * \"##\", \"b\" or \"bb\" followed by the octave number.\n   *\n   * @throws {RangeError} Invalid note name.\n   * @throws {RangeError} Invalid note name or note outside valid range.\n   * @return {Number} The MIDI note number (between 0 and 127)\n   */\n  WebMidi.prototype.noteNameToNumber = function(name) {\n\n    if (typeof name !== \"string\") name = \"\";\n\n    var matches = name.match(/([CDEFGAB])(#{0,2}|b{0,2})(-?\\d+)/i);\n    if(!matches) throw new RangeError(\"Invalid note name.\");\n\n    var semitones = wm._semitones[matches[1].toUpperCase()];\n    var octave = parseInt(matches[3]);\n    var result = ((octave + 1 - Math.floor(wm.octaveOffset)) * 12) + semitones;\n\n\n    if (matches[2].toLowerCase().indexOf(\"b\") > -1) {\n      result -= matches[2].length;\n    } else if (matches[2].toLowerCase().indexOf(\"#\") > -1) {\n      result += matches[2].length;\n    }\n\n    if (result < 0 || result > 127) {\n      throw new RangeError(\"Invalid note name or note outside valid range.\");\n    }\n\n    return result;\n\n  };\n\n  /**\n   * @method _updateInputsAndOutputs\n   * @static\n   * @protected\n   */\n  WebMidi.prototype._updateInputsAndOutputs = function() {\n    this._updateInputs();\n    this._updateOutputs();\n  };\n\n  /**\n   * @method _updateInputs\n   * @static\n   * @protected\n   */\n  WebMidi.prototype._updateInputs = function() {\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (var i = 0; i < this._inputs.length; i++) {\n\n      var remove = true;\n\n      var updated = this.interface.inputs.values();\n      for (var input = updated.next(); input && !input.done; input = updated.next()) {\n        if (this._inputs[i]._midiInput === input.value) {\n          remove = false;\n          break;\n        }\n      }\n\n      if (remove) {\n        this._inputs.splice(i, 1);\n      }\n\n    }\n\n    // Check for items to add in the existing inputs array because they just appeared in the MIDI\n    // back-end inputs list. We must check for the existence of this.interface because it might\n    // have been closed via WebMidi.disable().\n    this.interface && this.interface.inputs.forEach(function (nInput) {\n\n      var add = true;\n\n      for (var j = 0; j < this._inputs.length; j++) {\n        if (this._inputs[j]._midiInput === nInput) {\n          add = false;\n        }\n      }\n\n      if (add) {\n        this._inputs.push( new Input(nInput) );\n      }\n\n    }.bind(this));\n\n  };\n\n  /**\n   * @method _updateOutputs\n   * @static\n   * @protected\n   */\n  WebMidi.prototype._updateOutputs = function() {\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (var i = 0; i < this._outputs.length; i++) {\n\n      var remove = true;\n\n      var updated = this.interface.outputs.values();\n      for (var output = updated.next(); output && !output.done; output = updated.next()) {\n        if (this._outputs[i]._midiOutput === output.value) {\n          remove = false;\n          break;\n        }\n      }\n\n      if (remove) {\n        this._outputs.splice(i, 1);\n      }\n\n    }\n\n    // Check for items to add in the existing inputs array because they just appeared in the MIDI\n    // back-end outputs list. We must check for the existence of this.interface because it might\n    // have been closed via WebMidi.disable().\n    this.interface && this.interface.outputs.forEach(function (nOutput) {\n\n      var add = true;\n\n      for (var j = 0; j < this._outputs.length; j++) {\n        if (this._outputs[j]._midiOutput === nOutput) {\n          add = false;\n        }\n      }\n\n      if (add) {\n        this._outputs.push( new Output(nOutput) );\n      }\n\n    }.bind(this));\n\n  };\n\n  /**\n   * @method _onInterfaceStateChange\n   * @static\n   * @protected\n   */\n  WebMidi.prototype._onInterfaceStateChange = function(e) {\n\n    this._updateInputsAndOutputs();\n\n    /**\n     * Event emitted when a MIDI port becomes available. This event is typically fired whenever a\n     * MIDI device is plugged in. Please note that it may fire several times if a device possesses\n     * multiple input/output ports.\n     *\n     * @event connected\n     * @param {Object} event\n     * @param {Number} event.timestamp The timestamp when the event occurred (in milliseconds since\n     * the epoch).\n     * @param {String} event.type The type of event that occurred.\n     * @param {String} event.port The actual `Input` or `Output` object associated to the event.\n     */\n\n    /**\n     * Event emitted when a MIDI port becomes unavailable. This event is typically fired whenever a\n     * MIDI device is unplugged. Please note that it may fire several times if a device possesses\n     * multiple input/output ports.\n     *\n     * @event disconnected\n     * @param {Object} event\n     * @param {Number} event.timestamp The timestamp when the event occurred (in milliseconds since\n     * the epoch).\n     * @param {String} event.type The type of event that occurred.\n     * @param {String} event.port An generic object containing details about the port that triggered\n     * the event.\n     */\n    var event = {\n      timestamp: e.timeStamp,\n      type: e.port.state\n    };\n\n    if (this.interface && e.port.state === \"connected\") {\n\n      if (e.port.type === \"output\") {\n        event.port = this.getOutputById(e.port.id);\n      } else if (e.port.type === \"input\") {\n        event.port = this.getInputById(e.port.id);\n      }\n\n    } else {\n\n      event.port = {\n        connection: \"closed\",\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n\n    }\n\n    this._userHandlers[e.port.state].forEach(function (handler) {\n      handler(event);\n    });\n\n  };\n\n  /**\n   * @method _resetInterfaceUserHandlers\n   * @static\n   * @protected\n   */\n  WebMidi.prototype._resetInterfaceUserHandlers = function() {\n\n    for (var i = 0; i < this._midiInterfaceEvents.length; i++) {\n      this._userHandlers[this._midiInterfaceEvents[i]] = [];\n    }\n\n  };\n\n  /**\n   * The `Input` object represents a MIDI input port on the host system. This object is created by\n   * the MIDI subsystem and cannot be instantiated directly.\n   *\n   * You will find all available `Input` objects in the `WebMidi.inputs` array.\n   *\n   * @class Input\n   * @param {MIDIInput} midiInput `MIDIInput` object\n   */\n  function Input(midiInput) {\n\n    var that = this;\n\n    // User-defined handlers list\n    this._userHandlers = { channel: {}, system: {} };\n\n    // Reference to the actual MIDIInput object\n    this._midiInput = midiInput;\n\n    Object.defineProperties(this, {\n\n      /**\n       * [read-only] Status of the MIDI port\"s connection (`pending`, `open` or `closed`)\n       *\n       * @property connection\n       * @type String\n       */\n      connection: {\n        enumerable: true,\n        get: function () {\n          return that._midiInput.connection;\n        }\n      },\n\n      /**\n       * [read-only] ID string of the MIDI port. The ID is host-specific. Do not expect the same ID\n       * on different platforms. For example, Google Chrome and the Jazz-Plugin report completely\n       * different IDs for the same port.\n       *\n       * @property id\n       * @type String\n       */\n      id: {\n        enumerable: true,\n        get: function () {\n          return that._midiInput.id;\n        }\n      },\n\n      /**\n       * [read-only] Name of the manufacturer of the device that makes this port available.\n       *\n       * @property manufacturer\n       * @type String\n       */\n      manufacturer: {\n        enumerable: true,\n        get: function () {\n          return that._midiInput.manufacturer;\n        }\n      },\n\n      /**\n       * [read-only] Name of the MIDI port\n       *\n       * @property name\n       * @type String\n       */\n      name: {\n        enumerable: true,\n        get: function () {\n          return that._midiInput.name;\n        }\n      },\n\n      /**\n       * [read-only] State of the MIDI port (`connected` or `disconnected`)\n       *\n       * @property state\n       * @type String\n       */\n      state: {\n        enumerable: true,\n        get: function () {\n          return that._midiInput.state;\n        }\n      },\n\n      /**\n       * [read-only] Type of the MIDI port (`input`)\n       *\n       * @property type\n       * @type String\n       */\n      type: {\n        enumerable: true,\n        get: function () {\n          return that._midiInput.type;\n        }\n      }\n\n    });\n\n    this._initializeUserHandlers();\n    this._midiInput.onmidimessage = this._onMidiMessage.bind(this);\n\n  }\n\n  /**\n   * Adds an event listener to the `Input` that will trigger a function callback when the specified\n   * event happens. The events that are dispatched can be channel-specific or Input-wide.\n   *\n   * Here is a list of events that are dispatched by `Input` objects and that can be listened to.\n   *\n   * Channel-specific MIDI events:\n   *\n   *    * {{#crossLink \"Input/noteoff:event\"}}noteoff{{/crossLink}}\n   *    * {{#crossLink \"Input/noteon:event\"}}noteon{{/crossLink}}\n   *    * {{#crossLink \"Input/keyaftertouch:event\"}}keyaftertouch{{/crossLink}}\n   *    * {{#crossLink \"Input/controlchange:event\"}}controlchange{{/crossLink}}\n   *    * {{#crossLink \"Input/nrpn:event\"}}nrpn{{/crossLink}}\n   *    * {{#crossLink \"Input/channelmode:event\"}}channelmode{{/crossLink}}\n   *    * {{#crossLink \"Input/programchange:event\"}}programchange{{/crossLink}}\n   *    * {{#crossLink \"Input/channelaftertouch:event\"}}channelaftertouch{{/crossLink}}\n   *    * {{#crossLink \"Input/pitchbend:event\"}}pitchbend{{/crossLink}}\n   *\n   * Input-wide MIDI events:\n   *\n   *    * {{#crossLink \"Input/sysex:event\"}}sysex{{/crossLink}}\n   *    * {{#crossLink \"Input/timecode:event\"}}timecode{{/crossLink}}\n   *    * {{#crossLink \"Input/songposition:event\"}}songposition{{/crossLink}}\n   *    * {{#crossLink \"Input/songselect:event\"}}songselect{{/crossLink}}\n   *    * {{#crossLink \"Input/tuningrequest:event\"}}tuningrequest{{/crossLink}}\n   *    * {{#crossLink \"Input/clock:event\"}}clock{{/crossLink}}\n   *    * {{#crossLink \"Input/start:event\"}}start{{/crossLink}}\n   *    * {{#crossLink \"Input/continue:event\"}}continue{{/crossLink}}\n   *    * {{#crossLink \"Input/stop:event\"}}stop{{/crossLink}}\n   *    * {{#crossLink \"Input/activesensing:event\"}}activesensing{{/crossLink}}\n   *    * {{#crossLink \"Input/reset:event\"}}reset{{/crossLink}}\n   *    * {{#crossLink \"Input/midimessage:event\"}}midimessage{{/crossLink}}\n   *    * {{#crossLink \"Input/unknownsystemmessage:event\"}}unknownsystemmessage{{/crossLink}}\n   *\n   * For device-wide events, the `channel` parameter will be silently ignored. You can simply use\n   * `undefined` in that case.\n   *\n   * If you want to view all incoming MIDI traffic, you can listen to the input-wide `midimessage`\n   * event. This event is dispatched for every single message that is received on that input.\n   *\n   * @method addListener\n   * @chainable\n   *\n   * @param type {String} The type of the event.\n   *\n   * @param channel {Number|Array|String} The MIDI channel to listen on (integer between 1 and 16).\n   * You can also specify an array of channel numbers or the value \"all\" (or leave it undefined for\n   * input-wide events).\n   *\n   * @param listener {Function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object\"s properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @throws {RangeError} The \"channel\" parameter is invalid.\n   * @throws {TypeError} The \"listener\" parameter must be a function.\n   * @throws {TypeError} The specified event type is not supported.\n   *\n   * @return {WebMidi} Returns the `WebMidi` object so methods can be chained.\n   */\n  Input.prototype.addListener = function(type, channel, listener) {\n\n    var that = this;\n\n    if (channel === undefined) { channel = \"all\"; }\n    if (!Array.isArray(channel)) { channel = [channel]; }\n\n    // Check if channel entries are valid\n    channel.forEach(function(item){\n      if (item !== \"all\" && !(item >= 1 && item <= 16)) {\n        throw new RangeError(\n          \"The 'channel' parameter is invalid.\"\n        );\n      }\n    });\n\n    if (typeof listener !== \"function\") {\n      throw new TypeError(\"The 'listener' parameter must be a function.\");\n    }\n\n    if (wm.MIDI_SYSTEM_MESSAGES[type] !== undefined) {\n\n      if (!this._userHandlers.system[type]) this._userHandlers.system[type] = [];\n      this._userHandlers.system[type].push(listener);\n\n    } else if (wm.MIDI_CHANNEL_MESSAGES[type] !== undefined) {\n\n      // If \"all\" is present anywhere in the channel array, use all 16 channels\n      if (channel.indexOf(\"all\") > -1) {\n        channel = [];\n        for (var j = 1; j <= 16; j++) { channel.push(j); }\n      }\n\n      if (!this._userHandlers.channel[type]) { this._userHandlers.channel[type] = []; }\n\n      // Push all channel listeners in the array\n      channel.forEach(function(ch){\n\n        if (!that._userHandlers.channel[type][ch]) {\n          that._userHandlers.channel[type][ch] = [];\n        }\n\n        that._userHandlers.channel[type][ch].push(listener);\n\n      });\n\n    } else {\n      throw new TypeError(\"The specified event type is not supported.\");\n    }\n\n    return this;\n\n  };\n\n  /**\n   * This is an alias to the {{#crossLink \"Input/addListener\"}}Input.addListener(){{/crossLink}}\n   * function.\n   *\n   * @method on\n   * @since 2.0.0\n   */\n  Input.prototype.on = Input.prototype.addListener;\n\n  /**\n   * Checks if the specified event type is already defined to trigger the listener function on the\n   * specified channel(s). If more than one channel is specified, the function will return `true`\n   * only if all channels have the listener defined.\n   *\n   * For device-wide events (`sysex`, `start`, etc.), the `channel` parameter is silently ignored.\n   * We suggest you use `undefined` in such cases.\n   *\n   * @method hasListener\n   *\n   * @param type {String} The type of the event.\n   * @param channel {Number|Array|String} The MIDI channel to check on (between 1 and 16). You\n   * can also specify an array of channel numbers or the string \"all\".\n   * @param listener {Function} The callback function to check for.\n   *\n   * @throws {TypeError} The \"listener\" parameter must be a function.\n   *\n   * @return {Boolean} Boolean value indicating whether or not the channel(s) already have this\n   * listener defined.\n   */\n  Input.prototype.hasListener = function(type, channel, listener) {\n\n    var that = this;\n\n    if (typeof listener !== \"function\") {\n      throw new TypeError(\"The 'listener' parameter must be a function.\");\n    }\n\n    if (channel === undefined) { channel = \"all\"; }\n    if (channel.constructor !== Array) { channel = [channel]; }\n\n    if (wm.MIDI_SYSTEM_MESSAGES[type] !== undefined) {\n\n      for (var o = 0; o < this._userHandlers.system[type].length; o++) {\n        if (this._userHandlers.system[type][o] === listener) { return true; }\n      }\n\n    } else if (wm.MIDI_CHANNEL_MESSAGES[type] !== undefined) {\n\n      // If \"all\" is present anywhere in the channel array, use all 16 channels\n      if (channel.indexOf(\"all\") > -1) {\n        channel = [];\n        for (var j = 1; j <= 16; j++) { channel.push(j); }\n      }\n\n      if (!this._userHandlers.channel[type]) { return false; }\n\n      // Go through all specified channels\n      return channel.every(function(chNum) {\n        var listeners = that._userHandlers.channel[type][chNum];\n        return listeners && listeners.indexOf(listener) > -1;\n      });\n\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Removes the specified listener from the specified channel(s). If the `listener` parameter is\n   * left undefined, all listeners for the specified `type` will be removed from all channels. If\n   * the `channel` is also omitted, all listeners of the specified type will be removed from all\n   * channels. If no parameters are defined, all listeners attached to any channel of the `Input`\n   * will be removed.\n   *\n   * For device-wide events (`sysex`, `start`, etc.), the `channel` parameter is silently ignored.\n   * You can use `undefined` in such cases.\n   *\n   * @method removeListener\n   * @chainable\n   *\n   * @param [type] {String} The type of the event.\n   * @param [channel] {Number|String|Array} The MIDI channel(s) to check on. It can be a uint\n   * (between 1 and 16) an array of channel numbers or the special value \"all\".\n   * @param [listener] {Function} The callback function to check for.\n   *\n   * @throws {TypeError} The specified event type is not supported.\n   * @throws {TypeError} The \"listener\" parameter must be a function..\n   *\n   * @return {Input} The `Input` object for easy method chaining.\n   */\n  Input.prototype.removeListener = function(type, channel, listener) {\n\n    var that = this;\n\n    if (listener !== undefined && typeof listener !== \"function\") {\n      throw new TypeError(\"The 'listener' parameter must be a function.\");\n    }\n\n    if (channel === undefined) { channel = \"all\"; }\n    if (channel.constructor !== Array) { channel = [channel]; }\n\n    if (wm.MIDI_SYSTEM_MESSAGES[type] !== undefined) {\n\n      if (listener === undefined) {\n\n        this._userHandlers.system[type] = [];\n\n      } else {\n\n        for (var o = 0; o < this._userHandlers.system[type].length; o++) {\n          if (this._userHandlers.system[type][o] === listener) {\n            this._userHandlers.system[type].splice(o, 1);\n          }\n        }\n\n      }\n\n    } else if (wm.MIDI_CHANNEL_MESSAGES[type] !== undefined) {\n\n      // If \"all\" is present anywhere in the channel array, use all 16 channels\n      if (channel.indexOf(\"all\") > -1) {\n        channel = [];\n        for (var j = 1; j <= 16; j++) { channel.push(j); }\n      }\n\n      if (!this._userHandlers.channel[type]) { return this; }\n\n      // Go through all specified channels\n      channel.forEach(function(chNum) {\n        var listeners = that._userHandlers.channel[type][chNum];\n        if (!listeners) { return; }\n\n        if (listener === undefined) {\n          that._userHandlers.channel[type][chNum] = [];\n        } else {\n          for (var l = 0; l < listeners.length; l++) {\n            if (listeners[l] === listener) { listeners.splice(l, 1); }\n          }\n        }\n\n      });\n\n    } else if (type === undefined) {\n      this._initializeUserHandlers();\n    } else {\n      throw new TypeError(\"The specified event type is not supported.\");\n    }\n\n    return this;\n\n  };\n\n  /**\n   * @method _initializeUserHandlers\n   * @protected\n   */\n  Input.prototype._initializeUserHandlers = function() {\n\n    for (var prop1 in wm.MIDI_CHANNEL_MESSAGES) {\n      if (wm.MIDI_CHANNEL_MESSAGES.hasOwnProperty(prop1)) {\n        this._userHandlers.channel[prop1] = {};\n      }\n    }\n\n    for (var prop2 in wm.MIDI_SYSTEM_MESSAGES) {\n      if (wm.MIDI_SYSTEM_MESSAGES.hasOwnProperty(prop2)) {\n        this._userHandlers.system[prop2] = [];\n      }\n    }\n\n  };\n\n  /**\n   * @method _onMidiMessage\n   * @protected\n   */\n  Input.prototype._onMidiMessage = function(e) {\n\n    // Execute \"midimessage\" listeners (if any)\n    if (this._userHandlers.system[\"midimessage\"].length > 0) {\n\n      var event = {\n        target: this,\n        data: e.data,\n        timestamp: e.timeStamp,\n        type: \"midimessage\"\n      };\n\n      /**\n       * Event emitted when a MIDI message is received. This should be used primarily for debugging\n       * purposes.\n       *\n       * @event midimessage\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @param {uint} event.timestamp The timestamp when the event occurred (in milliseconds since\n       * the [Unix Epoch](https://en.wikipedia.org/wiki/Unix_time)).\n       * @param {String} event.type The type of event that occurred.\n       * @since 2.1\n       */\n      this._userHandlers.system[\"midimessage\"].forEach(\n        function(callback) { callback(event); }\n      );\n\n    }\n\n    if (e.data[0] < 240) {          // channel-specific message\n      this._parseChannelEvent(e);\n      this._parseNrpnEvent(e);\n    } else if (e.data[0] <= 255) {  // system message\n      this._parseSystemEvent(e);\n    }\n\n  };\n\n  /**\n   * Parses channel events and constructs NRPN message parts in valid sequences.\n   * Keeps a separate NRPN buffer for each channel.\n   * Emits an event after it receives the final CC parts msb 127 lsb 127.\n   * If a message is incomplete and other messages are received before\n   * the final 127 bytes, the incomplete message is cleared.\n   * @method _parseNrpnEvent\n   * @param e Event\n   * @protected\n   */\n  Input.prototype._parseNrpnEvent = function(e) {\n\n    var command = e.data[0] >> 4;\n    var channelBufferIndex = (e.data[0] & 0xf); // use this for index of channel in _nrpnBuffer\n    var channel = channelBufferIndex + 1;\n    var data1, data2;\n\n    if (e.data.length > 1) {\n      data1 = e.data[1];\n      data2 = e.data.length > 2 ? e.data[2] : undefined;\n    }\n\n    // nrpn disabled\n    if(!wm.nrpnEventsEnabled) {\n      return;\n    }\n\n    // nrpn enabled, message not valid for nrpn\n    if(\n      !(\n        command === wm.MIDI_CHANNEL_MESSAGES.controlchange &&\n        (\n          (data1 >= wm.MIDI_NRPN_MESSAGES.increment && data1 <= wm.MIDI_NRPN_MESSAGES.parammsb) ||\n          data1 === wm.MIDI_NRPN_MESSAGES.entrymsb ||\n          data1 === wm.MIDI_NRPN_MESSAGES.entrylsb\n        )\n      )\n    ) {\n      return;\n    }\n\n    // set up a CC event to parse as NRPN part\n    var ccEvent = {\n      target: this,\n      type: \"controlchange\",\n      data: e.data,\n      timestamp: e.timeStamp,\n      channel: channel,\n      controller: {\n        number: data1,\n        name: this.getCcNameByNumber(data1)\n      },\n      value: data2\n    };\n    if(\n      // if we get a starting MSB(CC99 - 0-126) vs an end MSB(CC99 - 127)\n      // destroy inclomplete NRPN and begin building again\n      ccEvent.controller.number === wm.MIDI_NRPN_MESSAGES.parammsb &&\n      ccEvent.value != wm.MIDI_NRPN_MESSAGES.nullactiveparameter\n    ) {\n      wm._nrpnBuffer[channelBufferIndex] = [];\n      wm._nrpnBuffer[channelBufferIndex][0] = ccEvent;\n    } else if(\n      // add the param LSB\n      wm._nrpnBuffer[channelBufferIndex].length === 1 &&\n        ccEvent.controller.number === wm.MIDI_NRPN_MESSAGES.paramlsb\n    ) {\n      wm._nrpnBuffer[channelBufferIndex].push(ccEvent);\n\n    } else if(\n      // add data inc/dec or value MSB for 14bit\n      wm._nrpnBuffer[channelBufferIndex].length === 2 &&\n        (ccEvent.controller.number === wm.MIDI_NRPN_MESSAGES.increment ||\n         ccEvent.controller.number === wm.MIDI_NRPN_MESSAGES.decrement ||\n         ccEvent.controller.number === wm.MIDI_NRPN_MESSAGES.entrymsb)\n    ) {\n      wm._nrpnBuffer[channelBufferIndex].push(ccEvent);\n\n    } else if(\n      // if we have a value MSB, only add an LSB to pair with that\n      wm._nrpnBuffer[channelBufferIndex].length === 3 &&\n        wm._nrpnBuffer[channelBufferIndex][2].number === wm.MIDI_NRPN_MESSAGES.entrymsb &&\n        ccEvent.controller.number === wm.MIDI_NRPN_MESSAGES.entrylsb\n    ) {\n      wm._nrpnBuffer[channelBufferIndex].push(ccEvent);\n\n    } else if(\n      // add an end MSB(CC99 - 127)\n      wm._nrpnBuffer[channelBufferIndex].length >= 3 &&\n      wm._nrpnBuffer[channelBufferIndex].length <= 4 &&\n        ccEvent.controller.number === wm.MIDI_NRPN_MESSAGES.parammsb &&\n        ccEvent.value === wm.MIDI_NRPN_MESSAGES.nullactiveparameter\n    ) {\n      wm._nrpnBuffer[channelBufferIndex].push(ccEvent);\n\n    } else if(\n      // add an end LSB(CC99 - 127)\n      wm._nrpnBuffer[channelBufferIndex].length >= 4 &&\n      wm._nrpnBuffer[channelBufferIndex].length <= 5 &&\n        ccEvent.controller.number === wm.MIDI_NRPN_MESSAGES.paramlsb &&\n        ccEvent.value === wm.MIDI_NRPN_MESSAGES.nullactiveparameter\n    ) {\n      wm._nrpnBuffer[channelBufferIndex].push(ccEvent);\n      // now we have a full inc or dec NRPN message, lets create that event!\n\n      var rawData = [];\n\n      wm._nrpnBuffer[channelBufferIndex].forEach(function(ev) {\n        rawData.push(ev.data);\n      });\n\n      var nrpnNumber = (wm._nrpnBuffer[channelBufferIndex][0].value<<7) |\n        (wm._nrpnBuffer[channelBufferIndex][1].value);\n      var nrpnValue = wm._nrpnBuffer[channelBufferIndex][2].value;\n      if(wm._nrpnBuffer[channelBufferIndex].length === 6) {\n        nrpnValue = (wm._nrpnBuffer[channelBufferIndex][2].value<<7) |\n          (wm._nrpnBuffer[channelBufferIndex][3].value);\n      }\n      var nrpnControllerType = \"\";\n      switch (wm._nrpnBuffer[channelBufferIndex][2].controller.number) {\n      case wm.MIDI_NRPN_MESSAGES.entrymsb:\n        nrpnControllerType = wm._nrpnTypes[0];\n        break;\n      case wm.MIDI_NRPN_MESSAGES.increment:\n        nrpnControllerType = wm._nrpnTypes[1];\n        break;\n      case wm.MIDI_NRPN_MESSAGES.decrement:\n        nrpnControllerType = wm._nrpnTypes[2];\n        break;\n      default:\n        throw new Error(\"The NPRN type was unidentifiable.\");\n      }\n\n      /**\n       * Event emitted when a valid NRPN message sequence has been received on a specific device and\n       * channel.\n       *\n       * @event nrpn\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Array} event.data The raw MIDI message as arrays of 8 bit values( Uint8Array ).\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {uint} event.channel The channel where the event occurred (between 1 and 16).\n       * @param {String} event.type The type of event that occurred.\n       * @param {Object} event.controller\n       * @param {uint} event.controller.number The number of the NRPN.\n       * @param {String} event.controller.name The usual name or function of the controller.\n       * @param {uint} event.value The value received (between 0 and 65535).\n       */\n\n      var nrpnEvent = {\n        timestamp: ccEvent.timestamp,\n        channel: ccEvent.channel,\n        type: \"nrpn\",\n        data: rawData,\n        controller: {\n          number: nrpnNumber,\n          type: nrpnControllerType,\n          name: \"Non-Registered Parameter \" + nrpnNumber\n        },\n        value: nrpnValue\n      };\n\n      // now we are done building an NRPN, so clear the NRPN buffer for this channel\n      wm._nrpnBuffer[channelBufferIndex] = [];\n      // If some callbacks have been defined for this event, on that device and channel, execute\n      // them.\n      if (\n        this._userHandlers.channel[nrpnEvent.type] &&\n        this._userHandlers.channel[nrpnEvent.type][nrpnEvent.channel]\n      ) {\n        this._userHandlers.channel[nrpnEvent.type][nrpnEvent.channel].forEach(\n          function(callback) { callback(nrpnEvent); }\n        );\n      }\n    } else {\n      // something didn't match, clear the incomplete NRPN message by\n      wm._nrpnBuffer[channelBufferIndex] = [];\n    }\n  };\n\n  /**\n   * @method _parseChannelEvent\n   * @param e Event\n   * @protected\n   */\n  Input.prototype._parseChannelEvent = function(e) {\n\n    var command = e.data[0] >> 4;\n    var channel = (e.data[0] & 0xf) + 1;\n    var data1, data2;\n\n    if (e.data.length > 1) {\n      data1 = e.data[1];\n      data2 = e.data.length > 2 ? e.data[2] : undefined;\n    }\n\n    // Returned event\n    var event = {\n      target: this,\n      data: e.data,\n      timestamp: e.timeStamp,\n      channel: channel\n    };\n\n    if (\n      command === wm.MIDI_CHANNEL_MESSAGES.noteoff ||\n      (command === wm.MIDI_CHANNEL_MESSAGES.noteon && data2 === 0)\n    ) {\n\n      /**\n       * Event emitted when a note off MIDI message has been received on a specific device and\n       * channel.\n       *\n       * @event noteoff\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {uint} event.channel The channel where the event occurred (between 1 and 16).\n       * @param {String} event.type The type of event that occurred.\n       * @param {Object} event.note\n       * @param {uint} event.note.number The MIDI note number.\n       * @param {String} event.note.name The usual note name (C, C#, D, D#, etc.).\n       * @param {uint} event.note.octave The octave (between -2 and 8).\n       * @param {Number} event.velocity The release velocity (between 0 and 1).\n       * @param {Number} event.rawVelocity The attack velocity expressed as a 7-bit integer (between\n       * 0 and 127).\n       */\n      event.type = \"noteoff\";\n      event.note = {\n        number: data1,\n        name: wm._notes[data1 % 12],\n        octave: wm.getOctave(data1)\n      };\n      event.velocity = data2 / 127;\n      event.rawVelocity = data2;\n\n    } else if (command === wm.MIDI_CHANNEL_MESSAGES.noteon) {\n\n      /**\n       * Event emitted when a note on MIDI message has been received on a specific device and\n       * channel.\n       *\n       * @event noteon\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {uint} event.channel The channel where the event occurred (between 1 and 16).\n       * @param {String} event.type The type of event that occurred.\n       * @param {Object} event.note\n       * @param {uint} event.note.number The MIDI note number.\n       * @param {String} event.note.name The usual note name (C, C#, D, D#, etc.).\n       * @param {uint} event.note.octave The octave (between -2 and 8).\n       * @param {Number} event.velocity The attack velocity (between 0 and 1).\n       * @param {Number} event.rawVelocity The attack velocity expressed as a 7-bit integer (between\n       * 0 and 127).\n       */\n      event.type = \"noteon\";\n      event.note = {\n        number: data1,\n        name: wm._notes[data1 % 12],\n        octave: wm.getOctave(data1)\n      };\n      event.velocity = data2 / 127;\n      event.rawVelocity = data2;\n\n    } else if (command === wm.MIDI_CHANNEL_MESSAGES.keyaftertouch) {\n\n      /**\n       * Event emitted when a key-specific aftertouch MIDI message has been received on a specific\n       * device and channel.\n       *\n       * @event keyaftertouch\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {uint} event.channel The channel where the event occurred (between 1 and 16).\n       * @param {String} event.type The type of event that occurred.\n       * @param {Object} event.note\n       * @param {uint} event.note.number The MIDI note number.\n       * @param {String} event.note.name The usual note name (C, C#, D, D#, etc.).\n       * @param {uint} event.note.octave The octave (between -2 and 8).\n       * @param {Number} event.value The aftertouch amount (between 0 and 1).\n       */\n      event.type = \"keyaftertouch\";\n      event.note = {\n        number: data1,\n        name: wm._notes[data1 % 12],\n        octave: wm.getOctave(data1)\n      };\n      event.value = data2 / 127;\n\n    } else if (\n      command === wm.MIDI_CHANNEL_MESSAGES.controlchange &&\n      data1 >= 0 && data1 <= 119\n    ) {\n\n      /**\n       * Event emitted when a control change MIDI message has been received on a specific device and\n       * channel.\n       *\n       * @event controlchange\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {uint} event.channel The channel where the event occurred (between 1 and 16).\n       * @param {String} event.type The type of event that occurred.\n       * @param {Object} event.controller\n       * @param {uint} event.controller.number The number of the controller.\n       * @param {String} event.controller.name The usual name or function of the controller.\n       * @param {uint} event.value The value received (between 0 and 127).\n       */\n      event.type = \"controlchange\";\n      event.controller = {\n        number: data1,\n        name: this.getCcNameByNumber(data1)\n      };\n      event.value = data2;\n\n    } else if (\n      command === wm.MIDI_CHANNEL_MESSAGES.channelmode &&\n      data1 >= 120 && data1 <= 127\n    ) {\n\n      /**\n       * Event emitted when a channel mode MIDI message has been received on a specific device and\n       * channel.\n       *\n       * @event channelmode\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {uint} event.channel The channel where the event occurred (between 1 and 16).\n       * @param {String} event.type The type of event that occurred.\n       * @param {Object} event.controller\n       * @param {uint} event.controller.number The number of the controller.\n       * @param {String} event.controller.name The usual name or function of the controller.\n       * @param {uint} event.value The value received (between 0 and 127).\n       */\n      event.type = \"channelmode\";\n      event.controller = {\n        number: data1,\n        name: this.getChannelModeByNumber(data1)\n      };\n      event.value = data2;\n\n    } else if (command === wm.MIDI_CHANNEL_MESSAGES.programchange) {\n\n      /**\n       * Event emitted when a program change MIDI message has been received on a specific device and\n       * channel.\n       *\n       * @event programchange\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {uint} event.channel The channel where the event occurred (between 1 and 16).\n       * @param {String} event.type The type of event that occurred.\n       * @param {uint} event.value The value received (between 0 and 127).\n       */\n      event.type = \"programchange\";\n      event.value = data1;\n\n    } else if (command === wm.MIDI_CHANNEL_MESSAGES.channelaftertouch) {\n\n      /**\n       * Event emitted when a channel-wide aftertouch MIDI message has been received on a specific\n       * device and channel.\n       *\n       * @event channelaftertouch\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {uint} event.channel The channel where the event occurred (between 1 and 16).\n       * @param {String} event.type The type of event that occurred.\n       * @param {Number} event.value The aftertouch value received (between 0 and 1).\n       */\n      event.type = \"channelaftertouch\";\n      event.value = data1 / 127;\n\n    } else if (command === wm.MIDI_CHANNEL_MESSAGES.pitchbend) {\n\n      /**\n       * Event emitted when a pitch bend MIDI message has been received on a specific device and\n       * channel.\n       *\n       * @event pitchbend\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {uint} event.channel The channel where the event occurred (between 1 and 16).\n       * @param {String} event.type The type of event that occurred.\n       * @param {Number} event.value The pitch bend value received (between -1 and 1).\n       */\n      event.type = \"pitchbend\";\n      event.value = ((data2 << 7) + data1 - 8192) / 8192;\n    } else {\n      event.type = \"unknownchannelmessage\";\n    }\n\n    // If some callbacks have been defined for this event, on that device and channel, execute them.\n    if (\n      this._userHandlers.channel[event.type] &&\n      this._userHandlers.channel[event.type][channel]\n    ) {\n\n      this._userHandlers.channel[event.type][channel].forEach(\n        function(callback) { callback(event); }\n      );\n    }\n\n  };\n\n  /**\n   * Returns the name of a control change message matching the specified number. If no match is\n   * found, the function returns `undefined`.\n   *\n   * @method getCcNameByNumber\n   *\n   * @param number {Number} The number of the control change message.\n   * @returns {String|undefined} The matching control change name or `undefined`.\n   *\n   * @throws RangeError The control change number must be between 0 and 119.\n   *\n   * @since 2.0.0\n   */\n  Input.prototype.getCcNameByNumber = function(number) {\n\n    number = Math.floor(number);\n\n    if ( !(number >= 0 && number <= 119) ) {\n      throw new RangeError(\"The control change number must be between 0 and 119.\");\n    }\n\n    for (var cc in wm.MIDI_CONTROL_CHANGE_MESSAGES) {\n\n      if (\n        wm.MIDI_CONTROL_CHANGE_MESSAGES.hasOwnProperty(cc) &&\n        number === wm.MIDI_CONTROL_CHANGE_MESSAGES[cc]\n      ) {\n        return cc;\n      }\n\n    }\n\n    return undefined;\n\n  };\n\n  /**\n   * Returns the channel mode name matching the specified number. If no match is found, the function\n   * returns `undefined`.\n   *\n   * @method getChannelModeByNumber\n   *\n   * @param number {Number} The number of the channel mode message.\n   * @returns {String|undefined} The matching channel mode message\"s name or `undefined`;\n   *\n   * @throws RangeError The channel mode number must be between 120 and 127.\n   *\n   * @since 2.0.0\n   */\n  Input.prototype.getChannelModeByNumber = function(number) {\n\n    number = Math.floor(number);\n\n    if ( !(number >= 120 && status <= 127) ) {\n      throw new RangeError(\"The control change number must be between 120 and 127.\");\n    }\n\n    for (var cm in wm.MIDI_CHANNEL_MODE_MESSAGES) {\n\n      if (\n        wm.MIDI_CHANNEL_MODE_MESSAGES.hasOwnProperty(cm) &&\n        number === wm.MIDI_CHANNEL_MODE_MESSAGES[cm]\n      ) {\n        return cm;\n      }\n\n    }\n\n  };\n\n  /**\n   * @method _parseSystemEvent\n   * @protected\n   */\n  Input.prototype._parseSystemEvent = function(e) {\n\n    var command = e.data[0];\n\n    // Returned event\n    var event = {\n      target: this,\n      data: e.data,\n      timestamp: e.timeStamp\n    };\n\n    if (command === wm.MIDI_SYSTEM_MESSAGES.sysex) {\n\n      /**\n       * Event emitted when a system exclusive MIDI message has been received. You should note that,\n       * to receive `sysex` events, you must call the `WebMidi.enable()` method with a second\n       * parameter set to `true`:\n       *\n       *     WebMidi.enable(function(err) {\n       *\n       *        if (err) {\n       *          console.log(\"WebMidi could not be enabled.\");\n       *        }\n       *\n       *        var input = WebMidi.inputs[0];\n       *\n       *        input.addListener(\"sysex\", \"all\", function (e) {\n       *          console.log(e);\n       *        });\n       *\n       *     }, true);\n       *\n       * @event sysex\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {String} event.type The type of event that occurred.\n       *\n       */\n      event.type = \"sysex\";\n\n    } else if (command === wm.MIDI_SYSTEM_MESSAGES.timecode) {\n\n      /**\n       * Event emitted when a system MIDI time code quarter frame message has been received.\n       *\n       * @event timecode\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {String} event.type The type of event that occurred.\n       */\n      event.type = \"timecode\";\n\n    } else if (command === wm.MIDI_SYSTEM_MESSAGES.songposition) {\n\n      /**\n       * Event emitted when a system song position pointer MIDI message has been received.\n       *\n       * @event songposition\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {String} event.type The type of event that occurred.\n       */\n      event.type = \"songposition\";\n\n    } else if (command === wm.MIDI_SYSTEM_MESSAGES.songselect) {\n\n      /**\n       * Event emitted when a system song select MIDI message has been received.\n       *\n       * @event songselect\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {String} event.type The type of event that occurred.\n       * @param {String} event.song Song (or sequence) number to select.\n       */\n      event.type = \"songselect\";\n      event.song = e.data[1];\n\n    } else if (command === wm.MIDI_SYSTEM_MESSAGES.tuningrequest) {\n\n      /**\n       * Event emitted when a system tune request MIDI message has been received.\n       *\n       * @event tuningrequest\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data     The raw MIDI message as an array of 8 bit\n       *                                    values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {String} event.type         The type of event that occurred.\n       */\n      event.type = \"tuningrequest\";\n\n    } else if (command === wm.MIDI_SYSTEM_MESSAGES.clock) {\n\n      /**\n       * Event emitted when a system timing clock MIDI message has been received.\n       *\n       * @event clock\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data     The raw MIDI message as an array of 8 bit\n       *                                    values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {String} event.type         The type of event that occurred.\n       */\n      event.type = \"clock\";\n\n    } else if (command === wm.MIDI_SYSTEM_MESSAGES.start) {\n\n      /**\n       * Event emitted when a system start MIDI message has been received.\n       *\n       * @event start\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data     The raw MIDI message as an array of 8 bit\n       *                                    values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {String} event.type         The type of event that occurred.\n       */\n      event.type = \"start\";\n\n    } else if (command === wm.MIDI_SYSTEM_MESSAGES.continue) {\n\n      /**\n       * Event emitted when a system continue MIDI message has been received.\n       *\n       * @event continue\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data     The raw MIDI message as an array of 8 bit\n       *                                    values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {String} event.type         The type of event that occurred.\n       */\n      event.type = \"continue\";\n\n    } else if (command === wm.MIDI_SYSTEM_MESSAGES.stop) {\n\n      /**\n       * Event emitted when a system stop MIDI message has been received.\n       *\n       * @event stop\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data     The raw MIDI message as an array of 8 bit\n       *                                    values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {String} event.type         The type of event that occurred.\n       */\n      event.type = \"stop\";\n\n    } else if (command === wm.MIDI_SYSTEM_MESSAGES.activesensing) {\n\n      /**\n       * Event emitted when a system active sensing MIDI message has been received.\n       *\n       * @event activesensing\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data     The raw MIDI message as an array of 8 bit values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {String} event.type         The type of event that occurred.\n       */\n      event.type = \"activesensing\";\n\n    } else if (command === wm.MIDI_SYSTEM_MESSAGES.reset) {\n\n      /**\n       * Event emitted when a system reset MIDI message has been received.\n       *\n       * @event reset\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data     The raw MIDI message as an array of 8 bit values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {String} event.type         The type of event that occurred.\n       */\n      event.type = \"reset\";\n\n    } else {\n\n      /**\n       * Event emitted when an unknown system MIDI message has been received. It could be, for\n       * example, one of the undefined/reserved messages.\n       *\n       * @event unknownsystemmessage\n       *\n       * @param {Object} event\n       * @param {Input} event.target The `Input` that triggered the event.\n       * @param {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @param {Number} event.timestamp The time when the event occurred (in milliseconds)\n       * @param {String} event.type The type of event that occurred.\n       */\n      event.type = \"unknownsystemmessage\";\n\n    }\n\n    // If some callbacks have been defined for this event, execute them.\n    if (this._userHandlers.system[event.type]) {\n      this._userHandlers.system[event.type].forEach(\n        function(callback) { callback(event); }\n      );\n    }\n\n  };\n\n  /**\n   * The `Output` object represents a MIDI output port on the host system. This object is created by\n   * the MIDI subsystem and cannot be instantiated directly.\n   *\n   * You will find all available `Output` objects in the `WebMidi.outputs` array.\n   *\n   * @class Output\n   * @param {MIDIOutput} midiOutput Actual `MIDIOutput` object as defined by the MIDI subsystem\n   */\n  function Output(midiOutput) {\n\n    var that = this;\n\n    this._midiOutput = midiOutput;\n\n    Object.defineProperties(this, {\n\n      /**\n       * [read-only] Status of the MIDI port\"s connection\n       *\n       * @property connection\n       * @type String\n       */\n      connection: {\n        enumerable: true,\n        get: function () {\n          return that._midiOutput.connection;\n        }\n      },\n\n      /**\n       * [read-only] ID string of the MIDI port\n       *\n       * @property id\n       * @type String\n       */\n      id: {\n        enumerable: true,\n        get: function () {\n          return that._midiOutput.id;\n        }\n      },\n\n      /**\n       * [read-only] Manufacturer of the device to which this port belongs\n       *\n       * @property manufacturer\n       * @type String\n       */\n      manufacturer: {\n        enumerable: true,\n        get: function () {\n          return that._midiOutput.manufacturer;\n        }\n      },\n\n      /**\n       * [read-only] Name of the MIDI port\n       *\n       * @property name\n       * @type String\n       */\n      name: {\n        enumerable: true,\n        get: function () {\n          return that._midiOutput.name;\n        }\n      },\n\n      /**\n       * [read-only] State of the MIDI port\n       *\n       * @property state\n       * @type String\n       */\n      state: {\n        enumerable: true,\n        get: function () {\n          return that._midiOutput.state;\n        }\n      },\n\n      /**\n       * [read-only] Type of the MIDI port (`output`)\n       *\n       * @property state\n       * @type String\n       */\n      type: {\n        enumerable: true,\n        get: function () {\n          return that._midiOutput.type;\n        }\n      }\n\n    });\n\n  }\n\n  /**\n   * Sends a MIDI message on the MIDI output port, at the scheduled timestamp.\n   *\n   * Unless, you are familiar with the details of the MIDI message format, you should not use this\n   * method directly. Instead, use one of the simpler helper methods: `playNote()`, `stopNote()`,\n   * `sendControlChange()`, `sendSystemMessage()`, etc.\n   *\n   * Details on the format of MIDI messages are available in the\n   * <a href=\"http://www.midi.org/techspecs/midimessages.php\">summary of MIDI messages</a> of the\n   * MIDI Manufacturers Association.\n   *\n   * @method send\n   * @chainable\n   *\n   * @param status {Number} The MIDI status byte of the message (128-255).\n   *\n   * @param [data=[]] {Array} An array of uints for the message. The number of data bytes varies\n   * depending on the status byte. It is perfectly legal to send no data for some message types (use\n   * undefined or an empty array in this case). Each byte must be between 0 and 255.\n   *\n   * @param [timestamp=0] {DOMHighResTimeStamp} The timestamp at which to send the message. You can\n   * use `WebMidi.time` to retrieve the current timestamp. To send immediately, leave blank or use\n   * 0.\n   *\n   * @throws {RangeError} The status byte must be an integer between 128 (0x80) and 255 (0xFF).\n   * @throws {RangeError} Data bytes must be integers between 0 (0x00) and 255 (0x7F).\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.send = function(status, data, timestamp) {\n\n    if ( !(status >= 128 && status <= 255) ) {\n      throw new RangeError(\"The status byte must be an integer between 128 (0x80) and 255 (0xFF).\");\n    }\n\n    if (data === undefined) data = [];\n    if ( !Array.isArray(data) ) data = [data];\n\n    var message = [];\n\n    data.forEach(function(item){\n\n      var parsed = Math.floor(item); // mandatory because of \"null\"\n\n      if (parsed >= 0 && parsed <= 255) {\n        message.push(parsed);\n      } else {\n        throw new RangeError(\"Data bytes must be integers between 0 (0x00) and 255 (0xFF).\");\n      }\n\n    });\n\n    this._midiOutput.send([status].concat(message), parseFloat(timestamp) || 0);\n\n    return this;\n\n  };\n\n  /**\n   * Sends a MIDI *system exclusive* (sysex) message. The generated message will automatically be\n   * prepended with the *sysex* byte (0xF0) and terminated with the *end of sysex* byte (0xF7).\n   *\n   * To use the `sendSysex()` method, system exclusive message support must have been enabled. To\n   * do so, you must pass `true` as the second parameter to `WebMidi.enable()`:\n   *\n   *     WebMidi.enable(function (err) {\n   *         if (err) {\n   *             console.warn(err);\n   *         } else {\n   *             console.log(\"Sysex is enabled!\");\n   *         }\n   *     }, true);\n   *\n   * Note that, depending on browser, version and platform, it may be necessary to serve the page\n   * over HTTPS to enable sysex support.\n   *\n   * #### Examples\n   *\n   * If you want to send a sysex message to a Korg device connected to the first output, you would\n   * use the following code:\n   *\n   *     WebMidi.outputs[0].sendSysex(0x42, [0x1, 0x2, 0x3, 0x4, 0x5]);\n   *\n   * The parameters can be specified using any number notation (decimal, hex, binary, etc.).\n   * Therefore, the code below is equivalent to the code above:\n   *\n   *     WebMidi.outputs[0].sendSysex(66, [1, 2, 3, 4, 5]);\n   *\n   * The above code sends the byte values 1, 2, 3, 4 and 5 to Korg devices (hex 42 is the same as\n   * decimal 66).\n   *\n   * Some manufacturers are identified using 3 bytes. In this case, you would use a 3-position array\n   * as the first parameter. For example, to send the same sysex message to a\n   * *Native Instruments* device:\n   *\n   *     WebMidi.outputs[0].sendSysex([0x00, 0x21, 0x09], [0x1, 0x2, 0x3, 0x4, 0x5]);\n   *\n   * There is no limit for the length of the data array. However, it is generally suggested to keep\n   * system exclusive messages to 64Kb or less.\n   *\n   * @method sendSysex\n   * @chainable\n   *\n   * @param manufacturer {Number|Array} An unsigned integer or an array of three unsigned integers\n   * between 0 and 127 that identify the targeted manufacturer. The *MIDI Manufacturers Association*\n   * maintains a full list of\n   * [Manufacturer ID Numbers](https://www.midi.org/specifications/item/manufacturer-id-numbers).\n   *\n   * @param [data=[]] {Array} An array of uints between 0 and 127. This is the data you wish to\n   * transfer.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @throw Sysex message support must first be activated.\n   * @throw The data bytes of a sysex message must be integers between 0 (0x00) and 127 (0x7F).\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.sendSysex = function(manufacturer, data, options) {\n\n    if (!wm.sysexEnabled) {\n      throw new Error(\"Sysex message support must first be activated.\");\n    }\n\n    options = options || {};\n\n    manufacturer = [].concat(manufacturer);\n\n    data.forEach(function(item){\n      if (item < 0 || item > 127) {\n        throw new RangeError(\n          \"The data bytes of a sysex message must be integers between 0 (0x00) and 127 (0x7F).\"\n        );\n      }\n    });\n\n    data = manufacturer.concat(data, wm.MIDI_SYSTEM_MESSAGES.sysexend);\n    this.send(wm.MIDI_SYSTEM_MESSAGES.sysex, data, this._parseTimeParameter(options.time));\n\n    return this;\n\n  };\n\n  /**\n   * Sends a *MIDI Timecode Quarter Frame* message. Please note that no processing is being done on\n   * the data. It is up to the developer to format the data according to the\n   * [MIDI Timecode](https://en.wikipedia.org/wiki/MIDI_timecode) format.\n   *\n   * @method sendTimecodeQuarterFrame\n   * @chainable\n   *\n   * @param value {Number} The quarter frame message content (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.sendTimecodeQuarterFrame = function(value, options) {\n    options = options || {};\n    this.send(wm.MIDI_SYSTEM_MESSAGES.timecode, value, this._parseTimeParameter(options.time));\n    return this;\n  };\n\n  /**\n   * Sends a *Song Position* MIDI message. The value is expressed in MIDI beats (between 0 and\n   * 16383) which are 16th note. Position 0 is always the start of the song.\n   *\n   * @method sendSongPosition\n   * @chainable\n   *\n   * @param [value=0] {Number} The MIDI beat to cue to (int between 0 and 16383).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.sendSongPosition = function(value, options) {\n\n    value = Math.floor(value) || 0;\n\n    options = options || {};\n\n    var msb = (value >> 7) & 0x7F;\n    var lsb = value & 0x7F;\n\n    this.send(\n      wm.MIDI_SYSTEM_MESSAGES.songposition,\n      [msb, lsb],\n      this._parseTimeParameter(options.time)\n    );\n    return this;\n\n  };\n\n  /**\n   * Sends a *Song Select* MIDI message. Beware that some devices will display position 0 as\n   * position 1 for user-friendlyness.\n   *\n   * @method sendSongSelect\n   * @chainable\n   *\n   * @param value {Number} The number of the song to select (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @throws The song number must be between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.sendSongSelect = function(value, options) {\n\n    value = Math.floor(value);\n\n    options = options || {};\n\n    if ( !(value >= 0 && value <= 127) ) {\n      throw new RangeError(\"The song number must be between 0 and 127.\");\n    }\n\n    this.send(wm.MIDI_SYSTEM_MESSAGES.songselect, [value], this._parseTimeParameter(options.time));\n\n    return this;\n\n  };\n\n  /**\n   * Sends a *MIDI tuning request* real-time message.\n   *\n   * Note: there is currently a bug in Chrome\"s MIDI implementation. If you try to use this\n   * function, Chrome will actually throw a \"Message is incomplete\" error. The bug is\n   * [scheduled to be fixed](https://bugs.chromium.org/p/chromium/issues/detail?id=610116).\n   *\n   * @method sendTuningRequest\n   * @chainable\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.sendTuningRequest = function(options) {\n    options = options || {};\n    this.send(\n      wm.MIDI_SYSTEM_MESSAGES.tuningrequest,\n      undefined,\n      this._parseTimeParameter(options.time)\n    );\n    return this;\n  };\n\n  /**\n   * Sends a *MIDI Clock* real-time message. According to the standard, there are 24 MIDI Clocks\n   * for every quarter note.\n   *\n   * @method sendClock\n   * @chainable\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.sendClock = function(options) {\n    options = options || {};\n    this.send(wm.MIDI_SYSTEM_MESSAGES.clock, undefined, this._parseTimeParameter(options.time));\n    return this;\n  };\n\n  /**\n   * Sends a *Start* real-time message. A MIDI Start message starts the playback of the current\n   * song at beat 0. To start playback elsewhere in the song, use the `sendContinue()` function.\n   *\n   * @method sendStart\n   * @chainable\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.sendStart = function(options) {\n    options = options || {};\n    this.send(wm.MIDI_SYSTEM_MESSAGES.start, undefined, this._parseTimeParameter(options.time));\n    return this;\n  };\n\n  /**\n   * Sends a *Continue* real-time message. This resumes song playback where it was previously\n   * stopped or where it was last cued with a song position message. To start playback from the\n   * start, use the `sendStart()` function.\n   *\n   * @method sendContinue\n   * @chainable\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @return {WebMidi} Returns the `WebMidi` object so methods can be chained.\n   */\n  Output.prototype.sendContinue = function(options) {\n    options = options || {};\n    this.send(wm.MIDI_SYSTEM_MESSAGES.continue, undefined, this._parseTimeParameter(options.time));\n    return this;\n  };\n\n  /**\n   * Sends a *Stop* real-time message. This tells the device connected to this port to stop playback\n   * immediately (or at the scheduled time).\n   *\n   * @method sendStop\n   * @chainable\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.sendStop = function(options) {\n    options = options || {};\n    this.send(wm.MIDI_SYSTEM_MESSAGES.stop, undefined, this._parseTimeParameter(options.time));\n    return this;\n  };\n\n  /**\n   * Sends an *Active Sensing* real-time message. This tells the device connected to this port that\n   * the connection is still good. Active sensing messages should be sent every 300 ms if there was\n   * no other activity on the MIDI port.\n   *\n   * @method sendActiveSensing\n   * @chainable\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.sendActiveSensing = function(options) {\n    options = options || {};\n    this.send(\n      wm.MIDI_SYSTEM_MESSAGES.activesensing,\n      [],\n      this._parseTimeParameter(options.time)\n    );\n    return this;\n  };\n\n  /**\n   * Sends *Reset* real-time message. This tells the device connected to this port that is should\n   * reset itself to a default state.\n   *\n   * @method sendReset\n   * @chainable\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.sendReset = function(options) {\n    options = options || {};\n    this.send(wm.MIDI_SYSTEM_MESSAGES.reset, undefined, this._parseTimeParameter(options.time));\n    return this;\n  };\n\n  /**\n   * Sends a MIDI **note off** message to the specified channel(s) for a single note or multiple\n   * simultaneous notes (chord). You can delay the execution of the **note off** command by using\n   * the `time` property of the `options` parameter (in milliseconds).\n   *\n   * @method stopNote\n   * @chainable\n   *\n   * @param note {Number|Array|String}  The note(s) you wish to stop. The notes can be specified in\n   * one of three ways. The first way is by using the MIDI note number (an integer between `0` and\n   * `127`). The second way is by using the note name followed by the octave (C3, G#4, F-1, Db7).\n   * The octave range should be between -2 and 8. The lowest note is C-2 (MIDI note number 0) and\n   * the highest note is G8 (MIDI note number 127). It is also possible to specify an array of note\n   * numbers and/or names. The final way is to use the special value `all` to send an \"allnotesoff\"\n   * channel message.\n   *\n   * @param [channel=all] {Number|Array|String} The MIDI channel number (between `1` and `16`) or an\n   * array of channel numbers. If the special value `all` is used (default), the message will be\n   * sent to all 16 channels.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {Boolean} [options.rawVelocity=false] Controls whether the release velocity is set using\n   * an integer between `0` and `127` (`true`) or a decimal number between `0` and `1` (`false`,\n   * default).\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @param {Number} [options.velocity=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawVelocity` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   * Note that when the first parameter to `stopNote()` is `all`, the release velocity is silently\n   * ignored.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.stopNote = function(note, channel, options) {\n\n    if (note === \"all\") {\n      return this.sendChannelMode(\"allnotesoff\", 0, channel, options);\n    }\n\n    var nVelocity = 64;\n\n    options = options || {};\n\n    if (options.rawVelocity) {\n\n      if (!isNaN(options.velocity) && options.velocity >= 0 && options.velocity <= 127) {\n        nVelocity = options.velocity;\n      }\n\n    } else {\n\n      if (!isNaN(options.velocity) && options.velocity >= 0 && options.velocity <= 1) {\n        nVelocity = options.velocity * 127;\n      }\n\n    }\n\n    // Send note off messages\n    this._convertNoteToArray(note).forEach(function(item) {\n\n      wm.toMIDIChannels(channel).forEach(function(ch) {\n\n        this.send(\n          (wm.MIDI_CHANNEL_MESSAGES.noteoff << 4) + (ch - 1),\n          [item, Math.round(nVelocity)],\n          this._parseTimeParameter(options.time)\n        );\n\n      }.bind(this));\n\n    }.bind(this));\n\n    return this;\n\n  };\n\n  /**\n   * Requests the playback of a single note or multiple notes on the specified channel(s). You can\n   * delay the execution of the **note on** command by using the `time` property of the `options`\n   * parameter (milliseconds).\n   *\n   * If no duration is specified in the `options`, the note will play until a matching **note off**\n   * is sent. If a duration is specified, a **note off** will be automatically sent after said\n   * duration.\n   *\n   * Note: As per the MIDI standard, a **note on** event with a velocity of `0` is considered to be\n   * a **note off**.\n   *\n   * @method playNote\n   * @chainable\n   *\n   * @param note {Number|String|Array}  The note(s) you wish to play. The notes can be specified in\n   * one of two ways. The first way is by using the MIDI note number (an integer between 0 and 127).\n   * The second way is by using the note name followed by the octave (C3, G#4, F-1, Db7). The octave\n   * range should be between -2 and 8. The lowest note is C-2 (MIDI note number 0) and the highest\n   * note is G8 (MIDI note number 127). It is also possible to specify an array of note numbers\n   * and/or names.\n   *\n   * @param [channel=all] {Number|Array|String} The MIDI channel number (between `1` and `16`) or an\n   * array of channel numbers. If the special value **all** is used (default), the message will be\n   * sent to all 16 channels.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {Number} [options.duration=undefined] The number of milliseconds (integer) to wait\n   * before sending a matching **note off** event. If left undefined, only a **note on** message is\n   * sent.\n   *\n   * @param {Boolean} [options.rawVelocity=false] Controls whether the attack and release velocities\n   * are set using integers between `0` and `127` (`true`) or a decimal number between `0` and `1`\n   * (`false`, default).\n   *\n   * @param {Number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawVelocity` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   * This is only used with the **note off** event triggered when `options.duration` is set.\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @param {Number} [options.velocity=0.5] The velocity at which to play the note (between `0` and\n   * `1`). If the `rawVelocity` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.playNote = function(note, channel, options) {\n\n    var time,\n      nVelocity = 64;\n\n    options = options || {};\n\n    if (options.rawVelocity) {\n\n      if (!isNaN(options.velocity) && options.velocity >= 0 && options.velocity <= 127) {\n        nVelocity = options.velocity;\n      }\n\n    } else {\n\n      if (!isNaN(options.velocity) && options.velocity >= 0 && options.velocity <= 1) {\n        nVelocity = options.velocity * 127;\n      }\n\n    }\n\n    time = this._parseTimeParameter(options.time);\n\n    // Send note on messages\n    this._convertNoteToArray(note).forEach(function(item) {\n\n      wm.toMIDIChannels(channel).forEach(function(ch) {\n        this.send(\n          (wm.MIDI_CHANNEL_MESSAGES.noteon << 4) + (ch - 1),\n          [item, Math.round(nVelocity)],\n          time\n        );\n      }.bind(this));\n\n    }.bind(this));\n\n\n    // Send note off messages (only if a valid duration has been defined)\n    if (!isNaN(options.duration)) {\n\n      if (options.duration <= 0) { options.duration = 0; }\n\n      var nRelease = 64;\n\n      if (options.rawVelocity) {\n\n        if (!isNaN(options.release) && options.release >= 0 && options.release <= 127) {\n          nRelease = options.release;\n        }\n\n      } else {\n\n        if (!isNaN(options.release) && options.release >= 0 && options.release <= 1) {\n          nRelease = options.release * 127;\n        }\n\n      }\n\n      this._convertNoteToArray(note).forEach(function(item) {\n\n        wm.toMIDIChannels(channel).forEach(function(ch) {\n\n          this.send(\n            (wm.MIDI_CHANNEL_MESSAGES.noteoff << 4) + (ch - 1),\n            [item, Math.round(nRelease)],\n            (time || wm.time) + options.duration\n          );\n        }.bind(this));\n\n      }.bind(this));\n\n    }\n\n    return this;\n\n  };\n\n  /**\n   * Sends a MIDI `key aftertouch` message to the specified channel(s) at the scheduled time. This\n   * is a key-specific aftertouch. For a channel-wide aftertouch message, use\n   * {{#crossLink \"WebMidi/sendChannelAftertouch:method\"}}sendChannelAftertouch(){{/crossLink}}.\n   *\n   * @method sendKeyAftertouch\n   * @chainable\n   *\n   * @param note {Number|String|Array}  The note for which you are sending an aftertouch value. The\n   * notes can be specified in one of two ways. The first way is by using the MIDI note number (an\n   * integer between 0 and 127). The second way is by using the note name followed by the octave\n   * (C3, G#4, F-1, Db7). The octave range should be between -2 and 8. The lowest note is C-2 (MIDI\n   * note number 0) and the highest note is G8 (MIDI note number 127). It is also possible to use\n   * an array of note names and/or numbers.\n   *\n   * @param [channel=all] {Number|Array|String} The MIDI channel number (between 1 and 16) or an\n   * array of channel numbers. If the special value \"all\" is used, the message will be sent to all\n   * 16 channels.\n   *\n   * @param {Number} [pressure=0.5] The pressure level to send (between 0 and 1).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @throws {RangeError} The channel must be between 1 and 16.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.sendKeyAftertouch = function(note, channel, pressure, options) {\n\n    var that = this;\n\n    options = options || {};\n\n    if (channel < 1 || channel > 16) {\n      throw new RangeError(\"The channel must be between 1 and 16.\");\n    }\n\n    if (isNaN(pressure) || pressure < 0 || pressure > 1) {\n      pressure = 0.5;\n    }\n\n    var nPressure = Math.round(pressure * 127);\n\n    this._convertNoteToArray(note).forEach(function(item) {\n\n      wm.toMIDIChannels(channel).forEach(function(ch) {\n        that.send(\n          (wm.MIDI_CHANNEL_MESSAGES.keyaftertouch << 4) + (ch - 1),\n          [item, nPressure],\n          that._parseTimeParameter(options.time)\n        );\n      });\n\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a MIDI `control change` message (a.k.a. CC message) to the specified channel(s) at the\n   * scheduled time. The control change message to send can be specified numerically or by using one\n   * of the following common names:\n   *\n   *  * `bankselectcoarse` (#0)\n   *  * `modulationwheelcoarse` (#1)\n   *  * `breathcontrollercoarse` (#2)\n   *  * `footcontrollercoarse` (#4)\n   *  * `portamentotimecoarse` (#5)\n   *  * `dataentrycoarse` (#6)\n   *  * `volumecoarse` (#7)\n   *  * `balancecoarse` (#8)\n   *  * `pancoarse` (#10)\n   *  * `expressioncoarse` (#11)\n   *  * `effectcontrol1coarse` (#12)\n   *  * `effectcontrol2coarse` (#13)\n   *  * `generalpurposeslider1` (#16)\n   *  * `generalpurposeslider2` (#17)\n   *  * `generalpurposeslider3` (#18)\n   *  * `generalpurposeslider4` (#19)\n   *  * `bankselectfine` (#32)\n   *  * `modulationwheelfine` (#33)\n   *  * `breathcontrollerfine` (#34)\n   *  * `footcontrollerfine` (#36)\n   *  * `portamentotimefine` (#37)\n   *  * `dataentryfine` (#38)\n   *  * `volumefine` (#39)\n   *  * `balancefine` (#40)\n   *  * `panfine` (#42)\n   *  * `expressionfine` (#43)\n   *  * `effectcontrol1fine` (#44)\n   *  * `effectcontrol2fine` (#45)\n   *  * `holdpedal` (#64)\n   *  * `portamento` (#65)\n   *  * `sustenutopedal` (#66)\n   *  * `softpedal` (#67)\n   *  * `legatopedal` (#68)\n   *  * `hold2pedal` (#69)\n   *  * `soundvariation` (#70)\n   *  * `resonance` (#71)\n   *  * `soundreleasetime` (#72)\n   *  * `soundattacktime` (#73)\n   *  * `brightness` (#74)\n   *  * `soundcontrol6` (#75)\n   *  * `soundcontrol7` (#76)\n   *  * `soundcontrol8` (#77)\n   *  * `soundcontrol9` (#78)\n   *  * `soundcontrol10` (#79)\n   *  * `generalpurposebutton1` (#80)\n   *  * `generalpurposebutton2` (#81)\n   *  * `generalpurposebutton3` (#82)\n   *  * `generalpurposebutton4` (#83)\n   *  * `reverblevel` (#91)\n   *  * `tremololevel` (#92)\n   *  * `choruslevel` (#93)\n   *  * `celestelevel` (#94)\n   *  * `phaserlevel` (#95)\n   *  * `databuttonincrement` (#96)\n   *  * `databuttondecrement` (#97)\n   *  * `nonregisteredparametercoarse` (#98)\n   *  * `nonregisteredparameterfine` (#99)\n   *  * `registeredparametercoarse` (#100)\n   *  * `registeredparameterfine` (#101)\n   *\n   * Note: as you can see above, not all control change message have a matching common name. This\n   * does not mean you cannot use the others. It simply means you will need to use their number\n   * instead of their name.\n   *\n   * To view a list of all available `control change` messages, please consult \"Table 3 - Control\n   * Change Messages\" from the [MIDI Messages](\n   * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)\n   * specification.\n   *\n   * @method sendControlChange\n   * @chainable\n   *\n   * @param controller {Number|String} The MIDI controller number (0-119) or name.\n   *\n   * @param [value=0] {Number} The value to send (0-127).\n   *\n   * @param [channel=all] {Number|Array|String} The MIDI channel number (between 1 and 16) or an\n   * array of channel numbers. If the special value \"all\" is used, the message will be sent to all\n   * 16 channels.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @throws {RangeError} Controller numbers must be between 0 and 119.\n   * @throws {RangeError} Value must be between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.sendControlChange = function(controller, value, channel, options) {\n\n    options = options || {};\n\n    if (typeof controller === \"string\") {\n\n      controller = wm.MIDI_CONTROL_CHANGE_MESSAGES[controller];\n      if (controller === undefined) throw new TypeError(\"Invalid controller name.\");\n\n    } else {\n\n      controller = Math.floor(controller);\n      if ( !(controller >= 0 && controller <= 119) ) {\n        throw new RangeError(\"Controller numbers must be between 0 and 119.\");\n      }\n\n    }\n\n    value = Math.floor(value) || 0;\n    if ( !(value >= 0 && value <= 127) ) {\n      throw new RangeError(\"Controller value must be between 0 and 127.\");\n    }\n\n    wm.toMIDIChannels(channel).forEach(function(ch) {\n      this.send(\n        (wm.MIDI_CHANNEL_MESSAGES.controlchange << 4) + (ch - 1),\n        [controller, value],\n        this._parseTimeParameter(options.time)\n      );\n    }.bind(this));\n\n    return this;\n\n  };\n\n  /**\n   * Selects a MIDI registered parameter so it is affected by data entry, data increment and data\n   * decrement messages.\n   *\n   * @method _selectRegisteredParameter\n   * @protected\n   *\n   * @param parameter {Array} A two-position array specifying the two control bytes (0x65, 0x64)\n   * that identify the registered parameter.\n   * @param channel\n   * @param time\n   *\n   * @returns {Output}\n   */\n  Output.prototype._selectRegisteredParameter = function(parameter, channel, time) {\n\n    var that = this;\n\n    parameter[0] = Math.floor(parameter[0]);\n    if ( !(parameter[0] >= 0 && parameter[0] <= 127) ) {\n      throw new RangeError(\"The control65 value must be between 0 and 127\");\n    }\n\n    parameter[1] = Math.floor(parameter[1]);\n    if ( !(parameter[1] >= 0 && parameter[1] <= 127) ) {\n      throw new RangeError(\"The control64 value must be between 0 and 127\");\n    }\n\n    wm.toMIDIChannels(channel).forEach(function() {\n      that.sendControlChange(0x65, parameter[0], channel, {time: time});\n      that.sendControlChange(0x64, parameter[1], channel, {time: time});\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Selects a MIDI non-registered parameter so it is affected by data entry, data increment and\n   * data decrement messages.\n   *\n   * @method _selectNonRegisteredParameter\n   * @protected\n   *\n   * @param parameter {Array} A two-position array specifying the two control bytes (0x63, 0x62)\n   * that identify the registered parameter.\n   * @param channel\n   * @param time\n   *\n   * @returns {Output}\n   */\n  Output.prototype._selectNonRegisteredParameter = function(parameter, channel, time) {\n\n    var that = this;\n\n    parameter[0] = Math.floor(parameter[0]);\n    if ( !(parameter[0] >= 0 && parameter[0] <= 127) ) {\n      throw new RangeError(\"The control63 value must be between 0 and 127\");\n    }\n\n    parameter[1] = Math.floor(parameter[1]);\n    if ( !(parameter[1] >= 0 && parameter[1] <= 127) ) {\n      throw new RangeError(\"The control62 value must be between 0 and 127\");\n    }\n\n    wm.toMIDIChannels(channel).forEach(function() {\n      that.sendControlChange(0x63, parameter[0], channel, {time: time});\n      that.sendControlChange(0x62, parameter[1], channel, {time: time});\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sets the value of the currently selected MIDI registered parameter.\n   *\n   * @method _setCurrentRegisteredParameter\n   * @protected\n   *\n   * @param data {int|Array}\n   * @param channel\n   * @param time\n   *\n   * @returns {Output}\n   */\n  Output.prototype._setCurrentRegisteredParameter = function(data, channel, time) {\n\n    var that = this;\n\n    data = [].concat(data);\n\n    data[0] = Math.floor(data[0]);\n    if ( !(data[0] >= 0 && data[0] <= 127) ) {\n      throw new RangeError(\"The msb value must be between 0 and 127\");\n    }\n\n    wm.toMIDIChannels(channel).forEach(function() {\n      that.sendControlChange(0x06, data[0], channel, {time: time});\n    });\n\n    data[1] = Math.floor(data[1]);\n    if(data[1] >= 0 && data[1] <= 127) {\n      wm.toMIDIChannels(channel).forEach(function() {\n        that.sendControlChange(0x26, data[1], channel, {time: time});\n      });\n    }\n\n    return this;\n\n  };\n\n  /**\n   * Deselects the currently active MIDI registered parameter so it is no longer affected by data\n   * entry, data increment and data decrement messages.\n   *\n   * Current best practice recommends doing that after each call to\n   * `_setCurrentRegisteredParameter()`.\n   *\n   * @method _deselectRegisteredParameter\n   * @protected\n   *\n   * @param channel\n   * @param time\n   *\n   * @returns {Output}\n   */\n  Output.prototype._deselectRegisteredParameter = function(channel, time) {\n\n    var that = this;\n\n    wm.toMIDIChannels(channel).forEach(function() {\n      that.sendControlChange(0x65, 0x7F, channel, {time: time});\n      that.sendControlChange(0x64, 0x7F, channel, {time: time});\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n   * up to two bytes of data that each can go from 0 to 127.\n   *\n   * >Unless you are very familiar with the MIDI standard you probably should favour one of the\n   * >simpler to use functions such as: `setPitchbendRange()`, `setModulationRange()`,\n   * >`setMasterTuning()`, etc.\n   *\n   * MIDI registered parameters extend the original list of control change messages. Currently,\n   * there are only a limited number of them. Here are the original registered parameters with the\n   * identifier that can be used as the first parameter of this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `pitchbendrange`\n   *  * Channel Fine Tuning (0x00, 0x01): `channelfinetuning`\n   *  * Channel Coarse Tuning (0x00, 0x02): `channelcoarsetuning`\n   *  * Tuning Program (0x00, 0x03): `tuningprogram`\n   *  * Tuning Bank (0x00, 0x04): `tuningbank`\n   *  * Modulation Range (0x00, 0x05): `modulationrange`\n   *\n   * Note that the **Tuning Program** and **Tuning Bank** parameters are part of the *MIDI Tuning\n   * Standard*, which is not widely implemented.\n   *\n   * Another set of extra parameters have been later added for 3D sound controllers. They are:\n   *\n   *  * Azimuth Angle (0x3D, 0x00): `azimuthangle`\n   *  * Elevation Angle (0x3D, 0x01): `elevationangle`\n   *  * Gain (0x3D, 0x02): `gain`\n   *  * Distance Ratio (0x3D, 0x03): `distanceratio`\n   *  * Maximum Distance (0x3D, 0x04): `maximumdistance`\n   *  * Maximum Distance Gain (0x3D, 0x05): `maximumdistancegain`\n   *  * Reference Distance Ratio (0x3D, 0x06): `referencedistanceratio`\n   *  * Pan Spread Angle (0x3D, 0x07): `panspreadangle`\n   *  * Roll Angle (0x3D, 0x08): `rollangle`\n   *\n   * @method setRegisteredParameter\n   * @chainable\n   *\n   * @param parameter {String|Array} A string identifying the parameter\"s name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param [data=[]] {Number|Array} An single integer or an array of integers with a maximum length\n   * of 2 specifying the desired data.\n   *\n   * @param [channel=all] {Number|Array|String} The MIDI channel number (between 1 and 16) or an\n   * array of channel numbers. If the special value \"all\" is used, the message will be sent to all\n   * 16 channels.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.setRegisteredParameter = function(parameter, data, channel, options) {\n\n    var that = this;\n\n    options = options || {};\n\n    if ( !Array.isArray(parameter) ) {\n      if ( !wm.MIDI_REGISTERED_PARAMETER[parameter]) {\n        throw new Error(\"The specified parameter is not available.\");\n      }\n      parameter = wm.MIDI_REGISTERED_PARAMETER[parameter];\n    }\n\n    wm.toMIDIChannels(channel).forEach(function() {\n      that._selectRegisteredParameter(parameter, channel, options.time);\n      that._setCurrentRegisteredParameter(data, channel, options.time);\n      that._deselectRegisteredParameter(channel, options.time);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sets a non-registered parameter to the specified value. The NRPN is selected by passing in a\n   * two-position array specifying the values of the two control bytes. The value is specified by\n   * passing in an single integer (most cases) or an array of two integers.\n   *\n   * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n   * they see fit. For example, according to the Roland GS specification, you can control the\n   * **vibrato rate** using NRPN (1, 8). Therefore, to set the **vibrato rate** value to **123** you\n   * would use:\n   *\n   *     WebMidi.outputs[0].setNonRegisteredParameter([1, 8], 123);\n   *\n   * Obviously, you should select a channel so the message is not sent to all channels. For\n   * instance, to send to channel 1 of the first output port, you would use:\n   *\n   *     WebMidi.outputs[0].setNonRegisteredParameter([1, 8], 123, 1);\n   *\n   * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n   * would use a 2-position array. For example, for its **ClockBPM** parameter (2, 63), Novation\n   * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n   * value to send was 10, you could use:\n   *\n   *     WebMidi.outputs[0].setNonRegisteredParameter([2, 63], [0, 10]);\n   *\n   * For further implementation details, refer to the manufacturer\"s documentation.\n   *\n   * @method setNonRegisteredParameter\n   * @chainable\n   *\n   * @param parameter {Array} A two-position array specifying the two control bytes (0x63,\n   * 0x62) that identify the non-registered parameter.\n   *\n   * @param [data=[]] {Number|Array} An integer or an array of integers with a length of 1 or 2\n   * specifying the desired data.\n   *\n   * @param [channel=all] {Number|Array|String} The MIDI channel number (between 1 and 16) or an\n   * array of channel numbers. If the special value \"all\" is used, the message will be sent to all\n   * 16 channels.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.setNonRegisteredParameter = function(parameter, data, channel, options) {\n\n    var that = this;\n\n    options = options || {};\n\n    if (\n      !(parameter[0] >= 0 && parameter[0] <= 127) ||\n      !(parameter[1] >= 0 && parameter[1] <= 127)\n    ) {\n      throw new Error(\n        \"Position 0 and 1 of the 2-position parameter array must both be between 0 and 127.\"\n      );\n    }\n\n    data = [].concat(data);\n\n    wm.toMIDIChannels(channel).forEach(function() {\n      that._selectNonRegisteredParameter(parameter, channel, options.time);\n      that._setCurrentRegisteredParameter(data, channel, options.time);\n      that._deselectRegisteredParameter(channel, options.time);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Increments the specified MIDI registered parameter by 1. For more specific MIDI usage\n   * information, check out [RP-18](http://dev.midi.org/techspecs/rp18.php) regarding the usage of\n   * increment and decrement controllers.\n   *\n   * >Unless you are very familiar with the MIDI standard you probably should favour one of the\n   * >simpler to use functions such as: `setPitchbendRange()`, `setModulationRange()`,\n   * >`setMasterTuning()`, etc.\n   *\n   * Here is the full list of parameter names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `pitchbendrange`\n   *  * Channel Fine Tuning (0x00, 0x01): `channelfinetuning`\n   *  * Channel Coarse Tuning (0x00, 0x02): `channelcoarsetuning`\n   *  * Tuning Program (0x00, 0x03): `tuningprogram`\n   *  * Tuning Bank (0x00, 0x04): `tuningbank`\n   *  * Modulation Range (0x00, 0x05): `modulationrange`\n   *  * Azimuth Angle (0x3D, 0x00): `azimuthangle`\n   *  * Elevation Angle (0x3D, 0x01): `elevationangle`\n   *  * Gain (0x3D, 0x02): `gain`\n   *  * Distance Ratio (0x3D, 0x03): `distanceratio`\n   *  * Maximum Distance (0x3D, 0x04): `maximumdistance`\n   *  * Maximum Distance Gain (0x3D, 0x05): `maximumdistancegain`\n   *  * Reference Distance Ratio (0x3D, 0x06): `referencedistanceratio`\n   *  * Pan Spread Angle (0x3D, 0x07): `panspreadangle`\n   *  * Roll Angle (0x3D, 0x08): `rollangle`\n   *\n   * @method incrementRegisteredParameter\n   * @chainable\n   *\n   * @param parameter {String|Array} A string identifying the parameter\"s name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param [channel=all] {uint|Array|String} The MIDI channel number (between 1 and 16) or an\n   * array of channel numbers. If the special value \"all\" is used, the message will be sent to all\n   * 16 channels.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @throws Error The specified parameter is not available.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.incrementRegisteredParameter = function(parameter, channel, options) {\n\n    var that = this;\n\n    options = options || {};\n\n    if ( !Array.isArray(parameter) ) {\n      if ( !wm.MIDI_REGISTERED_PARAMETER[parameter]) {\n        throw new Error(\"The specified parameter is not available.\");\n      }\n      parameter = wm.MIDI_REGISTERED_PARAMETER[parameter];\n    }\n\n    wm.toMIDIChannels(channel).forEach(function() {\n      that._selectRegisteredParameter(parameter, channel, options.time);\n      that.sendControlChange(0x60, 0, channel, {time: options.time});\n      that._deselectRegisteredParameter(channel, options.time);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Decrements the specified MIDI registered parameter by 1. For more specific MIDI usage\n   * information, check out [RP-18](http://dev.midi.org/techspecs/rp18.php) regarding the usage of\n   * increment and decrement controllers.\n   *\n   * >Unless you are very familiar with the MIDI standard you probably should favour one of the\n   * >simpler to use functions such as: `setPitchbendRange()`, `setModulationRange()`,\n   * >`setMasterTuning()`, etc.\n   *\n   * Here is the full list of parameter names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `pitchbendrange`\n   *  * Channel Fine Tuning (0x00, 0x01): `channelfinetuning`\n   *  * Channel Coarse Tuning (0x00, 0x02): `channelcoarsetuning`\n   *  * Tuning Program (0x00, 0x03): `tuningprogram`\n   *  * Tuning Bank (0x00, 0x04): `tuningbank`\n   *  * Modulation Range (0x00, 0x05): `modulationrange`\n   *  * Azimuth Angle (0x3D, 0x00): `azimuthangle`\n   *  * Elevation Angle (0x3D, 0x01): `elevationangle`\n   *  * Gain (0x3D, 0x02): `gain`\n   *  * Distance Ratio (0x3D, 0x03): `distanceratio`\n   *  * Maximum Distance (0x3D, 0x04): `maximumdistance`\n   *  * Maximum Distance Gain (0x3D, 0x05): `maximumdistancegain`\n   *  * Reference Distance Ratio (0x3D, 0x06): `referencedistanceratio`\n   *  * Pan Spread Angle (0x3D, 0x07): `panspreadangle`\n   *  * Roll Angle (0x3D, 0x08): `rollangle`\n   *\n   * @method decrementRegisteredParameter\n   * @chainable\n   *\n   * @param parameter {String|Array} A string identifying the parameter\"s name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param [channel=all] {Number|Array|String} The MIDI channel number (between 1 and 16) or an\n   * array of channel numbers. If the special value \"all\" is used, the message will be sent to all\n   * 16 channels.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @throws TypeError The specified parameter is not available.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.decrementRegisteredParameter = function(parameter, channel, options) {\n\n    options = options || {};\n\n    if ( !Array.isArray(parameter) ) {\n      if ( !wm.MIDI_REGISTERED_PARAMETER[parameter]) {\n        throw new TypeError(\"The specified parameter is not available.\");\n      }\n      parameter = wm.MIDI_REGISTERED_PARAMETER[parameter];\n    }\n\n    wm.toMIDIChannels(channel).forEach(function() {\n      this._selectRegisteredParameter(parameter, channel, options.time);\n      this.sendControlChange(0x61, 0, channel, {time: options.time});\n      this._deselectRegisteredParameter(channel, options.time);\n    }.bind(this));\n\n    return this;\n\n  };\n\n  /**\n   * Sends a pitch bend range message to the specified channel(s) at the scheduled time so that they\n   * adjust the range used by their pitch bend lever. The range can be specified with the\n   * `semitones` parameter, the `cents` parameter or by specifying both parameters at the same time.\n   *\n   * @method setPitchBendRange\n   * @chainable\n   *\n   * @param [semitones=0] {Number} The desired adjustment value in semitones (integer between\n   * 0-127). While nothing imposes that in the specification, it is very common for manufacturers to\n   * limit the range to 2 octaves (-12 semitones to 12 semitones).\n   *\n   * @param [cents=0] {Number} The desired adjustment value in cents (integer between 0-127).\n   *\n   * @param [channel=all] {Number|Array|String} The MIDI channel number (between 1 and 16) or an\n   * array of channel numbers. If the special value \"all\" is used, the message will be sent to all\n   * 16 channels.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @throws {RangeError} The semitones value must be between 0 and 127.\n   * @throws {RangeError} The cents value must be between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.setPitchBendRange = function(semitones, cents, channel, options) {\n\n    var that = this;\n\n    options = options || {};\n\n    semitones = Math.floor(semitones) || 0;\n    if ( !(semitones >= 0 && semitones <= 127) ) {\n      throw new RangeError(\"The semitones value must be between 0 and 127\");\n    }\n\n    cents = Math.floor(cents) || 0;\n    if ( !(cents >= 0 && cents <= 127) ) {\n      throw new RangeError(\"The cents value must be between 0 and 127\");\n    }\n\n    wm.toMIDIChannels(channel).forEach(function() {\n      that.setRegisteredParameter(\n        \"pitchbendrange\", [semitones, cents], channel, {time: options.time}\n      );\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a modulation depth range message to the specified channel(s) so that they adjust the\n   * depth of their modulation wheel\"s range. The range can be specified with the `semitones`\n   * parameter, the `cents` parameter or by specifying both parameters at the same time.\n   *\n   * @method setModulationRange\n   * @chainable\n   *\n   * @param [semitones=0] {Number} The desired adjustment value in semitones (integer between\n   * 0-127).\n   *\n   * @param [cents=0] {Number} The desired adjustment value in cents (0-127).\n   *\n   * @param [channel=all] {Number|Array|String} The MIDI channel number (between 1 and 16) or an\n   * array of channel numbers. If the special value \"all\" is used, the message will be sent to all\n   * 16 channels.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @throws {RangeError} The semitones value must be between 0 and 127.\n   * @throws {RangeError} The cents value must be between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.setModulationRange = function(semitones, cents, channel, options) {\n\n    var that = this;\n\n    options = options || {};\n\n    semitones = Math.floor(semitones) || 0;\n    if ( !(semitones >= 0 && semitones <= 127) ) {\n      throw new RangeError(\"The semitones value must be between 0 and 127\");\n    }\n\n    cents = Math.floor(cents) || 0;\n    if ( !(cents >= 0 && cents <= 127) ) {\n      throw new RangeError(\"The cents value must be between 0 and 127\");\n    }\n\n    wm.toMIDIChannels(channel).forEach(function() {\n      that.setRegisteredParameter(\n        \"modulationrange\", [semitones, cents], channel, {time: options.time}\n      );\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a master tuning message to the specified channel(s). The value is decimal and must be\n   * larger than -65 semitones and smaller than 64 semitones.\n   *\n   * >Because of the way the MIDI specification works, the decimal portion of the value will be\n   * >encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n   * >inclusively. For those familiar with the MIDI protocol, this function actually generates\n   * >**Master Coarse Tuning** and **Master Fine Tuning** RPN messages.\n   *\n   * @method setMasterTuning\n   * @chainable\n   *\n   * @param [value=0.0] {Number} The desired decimal adjustment value in semitones (-65 < x < 64)\n   *\n   * @param [channel=all] {Number|Array|String} The MIDI channel number (between 1 and 16) or an\n   * array of channel numbers. If the special value \"all\" is used, the message will be sent to all\n   * 16 channels.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n   * than 64.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.setMasterTuning = function(value, channel, options) {\n\n    var that = this;\n\n    options = options || {};\n\n    value = parseFloat(value) || 0.0;\n\n    if (value <= -65 || value >= 64) {\n      throw new RangeError(\n        \"The value must be a decimal number larger than -65 and smaller than 64.\"\n      );\n    }\n\n    var coarse = Math.floor(value) + 64;\n    var fine = value - Math.floor(value);\n\n    // Calculate MSB and LSB for fine adjustment (14bit resolution)\n    fine = Math.round((fine + 1) / 2 * 16383);\n    var msb = (fine >> 7) & 0x7F;\n    var lsb = fine & 0x7F;\n\n    wm.toMIDIChannels(channel).forEach(function() {\n      that.setRegisteredParameter(\"channelcoarsetuning\", coarse, channel, {time: options.time});\n      that.setRegisteredParameter(\"channelfinetuning\", [msb, lsb], channel, {time: options.time});\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * @method setTuningProgram\n   * @chainable\n   *\n   * @param value {Number} The desired tuning program (0-127).\n   *\n   * @param [channel=all] {Number|Array|String} The MIDI channel number (between 1 and 16) or an\n   * array of channel numbers. If the special value \"all\" is used, the message will be sent to all\n   * 16 channels.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @throws {RangeError} The program value must be between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.setTuningProgram = function(value, channel, options) {\n\n    var that = this;\n\n    options = options || {};\n\n    value = Math.floor(value);\n    if ( !(value >= 0 && value <= 127) ) {\n      throw new RangeError(\"The program value must be between 0 and 127\");\n    }\n\n    wm.toMIDIChannels(channel).forEach(function() {\n      that.setRegisteredParameter(\"tuningprogram\", value, channel, {time: options.time});\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * @method setTuningBank\n   * @chainable\n   *\n   * @param value {Number} The desired tuning bank (0-127).\n   *\n   * @param [channel=all] {Number|Array|String} The MIDI channel number (between 1 and 16) or an\n   * array of channel numbers. If the special value \"all\" is used, the message will be sent to all\n   * 16 channels.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @throws {RangeError} The bank value must be between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.setTuningBank = function(value, channel, options) {\n\n    var that = this;\n\n    options = options || {};\n\n    value = Math.floor(value) || 0;\n    if ( !(value >= 0 && value <= 127) ) {\n      throw new RangeError(\"The bank value must be between 0 and 127\");\n    }\n\n    wm.toMIDIChannels(channel).forEach(function() {\n      that.setRegisteredParameter(\"tuningbank\", value, channel, {time: options.time});\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a MIDI `channel mode` message to the specified channel(s). The channel mode message to\n   * send can be specified numerically or by using one of the following common names:\n   *\n   *   * `allsoundoff` (#120)\n   *   * `resetallcontrollers` (#121)\n   *   * `localcontrol` (#122)\n   *   * `allnotesoff` (#123)\n   *   * `omnimodeoff` (#124)\n   *   * `omnimodeon` (#125)\n   *   * `monomodeon` (#126)\n   *   * `polymodeon` (#127)\n   *\n   * It should be noted that, per the MIDI specification, only `localcontrol` and `monomodeon` may\n   * require a value that\"s not zero. For that reason, the `value` parameter is optional and\n   * defaults to 0.\n   *\n   * @method sendChannelMode\n   * @chainable\n   *\n   * @param command {Number|String} The numerical identifier of the channel mode message (integer\n   * between 120-127) or its name as a string.\n   * @param [value=0] {Number} The value to send (integer between 0-127).\n   * @param [channel=all] {Number|Array|String} The MIDI channel number (between 1 and 16) or an\n   * array of channel numbers. If the special value \"all\" is used, the message will be sent to all\n   * 16 channels.\n   * @param {Object} [options={}]\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   */\n  Output.prototype.sendChannelMode = function(command, value, channel, options) {\n\n    options = options || {};\n\n    if (typeof command === \"string\") {\n\n      command = wm.MIDI_CHANNEL_MODE_MESSAGES[command];\n\n      if (!command) {\n        throw new TypeError(\"Invalid channel mode message name.\");\n      }\n\n    } else {\n\n      command = Math.floor(command);\n\n      if ( !(command >= 120 && command <= 127) ) {\n        throw new RangeError(\"Channel mode numerical identifiers must be between 120 and 127.\");\n      }\n\n    }\n\n    value = Math.floor(value) || 0;\n\n    if (value < 0 || value > 127) {\n      throw new RangeError(\"Value must be an integer between 0 and 127.\");\n    }\n\n    wm.toMIDIChannels(channel).forEach(function(ch) {\n\n      this.send(\n        (wm.MIDI_CHANNEL_MESSAGES.channelmode << 4) + (ch - 1),\n        [command, value],\n        this._parseTimeParameter(options.time)\n      );\n\n    }.bind(this));\n\n    return this;\n\n  };\n\n  /**\n   * Sends a MIDI `program change` message to the specified channel(s) at the scheduled time.\n   *\n   * @method sendProgramChange\n   * @chainable\n   *\n   * @param program {Number} The MIDI patch (program) number (0-127)\n   *\n   * @param [channel=all] {Number|Array|String} The MIDI channel number (between 1 and 16) or an\n   * array of channel numbers. If the special value \"all\" is used, the message will be sent to all\n   * 16 channels.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @throws {RangeError} Program numbers must be between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   */\n  Output.prototype.sendProgramChange = function(program, channel, options) {\n\n    var that = this;\n\n    options = options || {};\n\n    program = Math.floor(program);\n    if (isNaN(program) || program < 0 || program > 127) {\n      throw new RangeError(\"Program numbers must be between 0 and 127.\");\n    }\n\n    wm.toMIDIChannels(channel).forEach(function(ch) {\n      that.send(\n        (wm.MIDI_CHANNEL_MESSAGES.programchange << 4) + (ch - 1),\n        [program],\n        that._parseTimeParameter(options.time)\n      );\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a MIDI `channel aftertouch` message to the specified channel(s). For key-specific\n   * aftertouch, you should instead use `sendKeyAftertouch()`.\n   *\n   * @method sendChannelAftertouch\n   * @chainable\n   *\n   * @param [pressure=0.5] {Number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour.\n   *\n   * @param [channel=all] {Number|Array|String}  The MIDI channel number (between 1 and 16) or\n   * an array of channel numbers. If the special value \"all\" is used, the message will be sent to\n   * all 16 channels.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.sendChannelAftertouch = function(pressure, channel, options) {\n\n    var that = this;\n\n    options = options || {};\n\n    pressure = parseFloat(pressure);\n    if (isNaN(pressure) || pressure < 0 || pressure > 1) { pressure = 0.5; }\n\n    var nPressure = Math.round(pressure * 127);\n\n    wm.toMIDIChannels(channel).forEach(function(ch) {\n      that.send(\n        (wm.MIDI_CHANNEL_MESSAGES.channelaftertouch << 4) + (ch - 1),\n        [nPressure],\n        that._parseTimeParameter(options.time)\n      );\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a MIDI `pitch bend` message to the specified channel(s) at the scheduled time.\n   *\n   * @method sendPitchBend\n   * @chainable\n   *\n   * @param bend {Number} The intensity level of the bend (between -1 and 1). A value of zero means\n   * no bend.\n   *\n   * @param [channel=all] {Number|Array|String}  The MIDI channel number (between 1 and 16) or an\n   * array of channel numbers. If the special value \"all\" is used, the message will be sent to all\n   * 16 channels.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {DOMHighResTimeStamp|String} [options.time=undefined] This value can be one of two\n   * things. If the value is a string starting with the + sign and followed by a number, the request\n   * will be delayed by the specified number (in milliseconds). Otherwise, the value is considered a\n   * timestamp and the request will be scheduled at that timestamp. The `DOMHighResTimeStamp` value\n   * is relative to the navigation start of the document. To retrieve the current time, you can use\n   * `WebMidi.time`. If `time` is not present or is set to a time in the past, the request is to be\n   * sent as soon as possible.\n   *\n   * @throws {RangeError} Pitch bend value must be between -1 and 1.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  Output.prototype.sendPitchBend = function(bend, channel, options) {\n\n    var that = this;\n\n    options = options || {};\n\n    if (isNaN(bend) || bend < -1 || bend > 1) {\n      throw new RangeError(\"Pitch bend value must be between -1 and 1.\");\n    }\n\n    var nLevel = Math.round((bend + 1) / 2 * 16383);\n    var msb = (nLevel >> 7) & 0x7F;\n    var lsb = nLevel & 0x7F;\n\n    wm.toMIDIChannels(channel).forEach(function(ch) {\n      that.send(\n        (wm.MIDI_CHANNEL_MESSAGES.pitchbend << 4) + (ch - 1),\n        [lsb, msb],\n        that._parseTimeParameter(options.time)\n      );\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Returns a timestamp, relative to the navigation start of the document, derived from the `time`\n   * parameter. If the parameter is a string starting with the \"+\" sign and followed by a number,\n   * the resulting value will be the sum of the current timestamp plus that number. Otherwise, the\n   * value will be returned as is.\n   *\n   * If the calculated return value is 0, less than zero or an otherwise invalid value, `undefined`\n   * will be returned.\n   *\n   * @method _parseTimeParameter\n   * @param [time] {Number|String}\n   * @return DOMHighResTimeStamp\n   * @protected\n   */\n  Output.prototype._parseTimeParameter = function(time) {\n\n    var value,\n      parsed = parseFloat(time);\n\n    if (typeof time === \"string\" && time.substring(0, 1) === \"+\") {\n      if (parsed && parsed > 0) value = wm.time + parsed;\n    } else {\n      if (parsed > wm.time) value = parsed;\n    }\n\n    return value;\n\n  };\n\n  /**\n   * Converts an input value (which can be a uint, a string or an array of the previous two) to an\n   * array of MIDI note numbers.\n   *\n   * @method _convertNoteToArray\n   * @param [note] {Number|Array|String}\n   * @returns {Array}\n   * @protected\n   */\n  Output.prototype._convertNoteToArray = function(note) {\n\n    var notes = [];\n\n    if ( !Array.isArray(note) ) { note = [note]; }\n\n    note.forEach(function(item) {\n      notes.push(wm.guessNoteNumber(item));\n    });\n\n    return notes;\n\n  };\n\n  // Check if RequireJS/AMD is used. If it is, use it to define our module instead of\n  // polluting the global space.\n  if ( typeof define === \"function\" && typeof define.amd === \"object\") {\n    define([], function () {\n      return wm;\n    });\n  } else if (typeof module !== \"undefined\" && module.exports) {\n    module.exports = wm;\n  } else {\n    if (!scope.WebMidi) { scope.WebMidi = wm; }\n  }\n\n}(this));\n"]}]}